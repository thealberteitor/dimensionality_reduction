# Cargar Iris
out <- preprocess_data(iris[,1:4], iris$Species, z_threshold = 3)
X <- out$data; labels <- out$labels
# Matriz de distancias y pesos locales (k-NN)
d0 <- dist(X)
mat_d0 <- as.matrix(d0)
n <- nrow(mat_d0)
k <- 7
nn <- apply(mat_d0, 1, function(x) order(x)[2:(k+1)])
W <- matrix(0, n, n)
for(i in seq_len(n)){
W[i, nn[,i]] <- 1
W[nn[,i], i] <- 1
}
# Local MDS
res_lmds <- smacofSym(d0, weightmat = W, ndim = 2)
emb <- res_lmds$conf
# Cálculo de métricas
d1 <- dist(emb)
spearman <- cor(as.vector(d0), as.vector(d1), method = "spearman")
ari <- adjustedRandIndex(kmeans(emb, centers = 3)$cluster, labels)
sil <- mean(silhouette(kmeans(emb, centers = 3)$cluster, d1)[, "sil_width"])
rank0 <- apply(as.matrix(d0), 2, rank, ties.method = "average")
rank1 <- apply(as.matrix(d1), 2, rank, ties.method = "average")
trust <- compute_trustworthiness(rank0, rank1, k)
cont <- compute_continuity(rank0, rank1, k)
cat(sprintf("Spearman=%.3f\nARI=%.3f\nSilhouette=%.3f\nTrustworthiness=%.3f\nContinuity=%.3f\n",
spearman, ari, sil, trust, cont),
file = "results/metrics_config_local_mds_iris.txt")
# Generación del plot
mds_df <- data.frame(Dim1 = emb[,1], Dim2 = emb[,2], Species = labels)
p <- ggplot(mds_df, aes(Dim1, Dim2, color = Species)) +
geom_point(size = 2) +
ggtitle("L-MDS") +
big_text_theme
print(p)
ggsave("plots/Local_MDS_Iris_plot.png", plot = p, dpi = 300, width = 8, height = 6)
library(smacof)
library(ggplot2)
library(mclust)
library(cluster)
source("../metrics.R")
source("../preprocess.R")
source("../plot_theme.R")
load("data/wine.RData")
library(smacof)
library(mclust)
library(cluster)
library(ggplot2)
source("../metrics.R")
source("../preprocess.R")
source("../plot_theme.R")
out <- preprocess_data(iris[,1:4], iris$Species, z_threshold = 3)
X <- out$data; labels <- out$labels
# Matriz de distancias y pesos locales (k-NN)
d0 <- dist(X)
mat_d0 <- as.matrix(d0)
n <- nrow(mat_d0)
k <- 7
nn <- apply(mat_d0, 1, function(x) order(x)[2:(k+1)])
W <- matrix(0, n, n)
for(i in seq_len(n)){
W[i, nn[,i]] <- 1
W[nn[,i], i] <- 1
}
# Local MDS
res_lmds <- smacofSym(d0, weightmat = W, ndim = 2)
emb <- res_lmds$conf
# Cálculo de métricas
d1 <- dist(emb)
spearman <- cor(as.vector(d0), as.vector(d1), method = "spearman")
ari <- adjustedRandIndex(kmeans(emb, centers = 3)$cluster, labels)
sil <- mean(silhouette(kmeans(emb, centers = 3)$cluster, d1)[, "sil_width"])
rank0 <- apply(as.matrix(d0), 2, rank, ties.method = "average")
rank1 <- apply(as.matrix(d1), 2, rank, ties.method = "average")
trust <- compute_trustworthiness(rank0, rank1, k)
cont <- compute_continuity(rank0, rank1, k)
cat(sprintf("Spearman=%.3f\nARI=%.3f\nSilhouette=%.3f\nTrustworthiness=%.3f\nContinuity=%.3f\n",
spearman, ari, sil, trust, cont),
file = "results/metrics_config_local_mds_iris.txt")
mds_df <- data.frame(Dim1 = emb[,1], Dim2 = emb[,2], Species = labels)
p <- ggplot(mds_df, aes(Dim1, Dim2, color = Species)) +
geom_point(size = 2) +
ggtitle("L-MDS") +
big_text_theme
print(p)
ggsave("plots/Local_MDS_Iris_plot.png", plot = p, dpi = 300, width = 8, height = 6)
getwd()
setwd("/home/albduranlopez/Escritorio/TFM Estadística/Wine")
library(smacof)
library(ggplot2)
library(mclust)
library(cluster)
source("../metrics.R")
source("../preprocess.R")
source("../plot_theme.R")
load("data/wine.RData")
data_raw   <- wine[, -1]
labels_raw <- factor(wine[, 1])
# Preprocesado
out    <- preprocess_data(data_raw, labels_raw, z_threshold = 3)
X      <- out$data
labels <- out$labels
# Matriz de distancias y pesos locales (k-NN)
d0    <- dist(X)
mat   <- as.matrix(d0)
n     <- nrow(mat)
k_nn  <- 7
nn    <- apply(mat, 1, function(x) order(x)[2:(k_nn+1)])
W     <- matrix(0, n, n)
for(i in seq_len(n)) {
W[i,   nn[,i]] <- 1
W[nn[,i], i]   <- 1
}
# Local MDS
res_lmds <- smacofSym(d0, weightmat = W, ndim = 2)
emb      <- res_lmds$conf
d1        <- dist(emb)
spearman  <- cor(as.vector(d0), as.vector(d1), method = "spearman")
ari       <- adjustedRandIndex(kmeans(emb, length(unique(labels)))$cluster, labels)
sil_obj   <- silhouette(kmeans(emb, length(unique(labels)))$cluster, d1)
sil       <- mean(sil_obj[, "sil_width"])
rank0     <- apply(as.matrix(d0), 2, rank, ties.method = "average")
rank1     <- apply(as.matrix(d1), 2, rank, ties.method = "average")
trust     <- compute_trustworthiness(rank0, rank1, k_nn)
cont      <- compute_continuity(rank0, rank1, k_nn)
cat(sprintf("Spearman=%.3f\nARI=%.3f\nSilhouette=%.3f\nTrustworthiness=%.3f\nContinuity=%.3f\n",
spearman, ari, sil, trust, cont),
file = "results/metrics_config_local_mds_wine.txt")
df <- data.frame(Dim1 = emb[,1], Dim2 = emb[,2], Type = labels)
p  <- ggplot(df, aes(x = Dim1, y = Dim2, color = Type)) +
geom_point(size = 2) +
ggtitle("L‑MDS") +
big_text_theme
print(p)
ggsave("plots/Local_MDS_Wine_plot.png", plot = p, width = 8, height = 6, dpi = 300)
library(keras)
library(MASS)
library(smacof)
library(mclust)
library(cluster)
library(ggplot2)
source("../metrics.R")
source("../preprocess.R")
source("../plot_theme.R")
mnist      <- dataset_mnist()
set.seed(123)
n_samples  <- 20000
idx        <- sample(seq_len(nrow(mnist$train$x)), n_samples)
data_raw   <- mnist$train$x[idx,,, drop = FALSE]
labels_raw <- mnist$train$y[idx]
# Preprocesado
X_raw      <- array_reshape(data_raw, c(n_samples, 28*28)) / 255
out    <- preprocess_data(X_raw, labels_raw, z_threshold = 3)
X      <- out$data
labels <- out$labels
# matriz distancias y pesos locales (k-NN)
d0     <- dist(X)
mat_d0 <- as.matrix(d0)
n      <- nrow(mat_d0)
k      <- 7
nn_idx <- apply(mat_d0, 1, function(x) order(x)[2:(k+1)])
W      <- matrix(0, n, n)
for(i in seq_len(n)){
W[i, nn_idx[,i]] <- 1
W[nn_idx[,i], i] <- 1
}
# Local MDS
res_lmds <- smacofSym(d0, weightmat = W, ndim = 2)
# tsne_wine.R
library(Rtsne)
library(ggplot2)
library(mclust)
library(cluster)
source("../metrics.R")
source("../preprocess.R")
source("../plot_theme.R")
# 1) Cargar Wine
load("data/wine.RData")
data_raw   <- wine[, -1]
labels_raw <- factor(wine[, 1])
# 2) Preprocesado
out    <- preprocess_data(data_raw, labels_raw, z_threshold = 3)
X      <- out$data
labels <- out$labels
# 3) Embedding t‑SNE
set.seed(123)
tsne_res <- Rtsne(X, perplexity = 30, verbose = FALSE, max_iter = 500)
emb      <- tsne_res$Y
# 4) Métricas
d0        <- dist(X)
d1        <- dist(emb)
spearman  <- cor(as.vector(d0), as.vector(d1), method = "spearman")
ari       <- adjustedRandIndex(kmeans(emb, length(unique(labels)))$cluster, labels)
silhouette_t <- mean(silhouette(kmeans(emb, length(unique(labels)))$cluster, d1)[, "sil_width"])
rank0     <- apply(as.matrix(d0), 2, rank, ties.method = "average")
rank1     <- apply(as.matrix(d1), 2, rank, ties.method = "average")
trust     <- compute_trustworthiness(rank0, rank1, k = 7)
cont      <- compute_continuity(rank0, rank1, k = 7)
# 5) Guardar métricas
cat(sprintf("Spearman=%.3f\nARI=%.3f\nSilhouette=%.3f\nTrustworthiness=%.3f\nContinuity=%.3f\n",
spearman, ari, silhouette_t, trust, cont),
file = "results/metrics_config_tsne_wine.txt")
# 6) Plot
df <- data.frame(Dim1 = emb[,1], Dim2 = emb[,2], Class = labels)
p  <- ggplot(df, aes(Dim1, Dim2, color = Class)) +
geom_point(size = 2) +
ggtitle("t‑SNE")
print(p)
ggsave("plots/tSNE_Wine_plot.png", plot = p, width = 8, height = 6, dpi = 300)
# sm_mds_wine.R
library(MASS)        # sammon()
library(ggplot2)
library(mclust)
library(cluster)
source("../metrics.R")
source("../preprocess.R")
source("../plot_theme.R")
# 1) Cargar Wine
load("data/wine.RData")
data_raw   <- wine[, -1]
labels_raw <- factor(wine[, 1])
# 2) Preprocesado
out    <- preprocess_data(data_raw, labels_raw, z_threshold = 3)
X      <- out$data
labels <- out$labels
# 3) Añadir jitter mínimo
set.seed(123)
eps <- 1e-8
X_j <- X + matrix(rnorm(nrow(X)*ncol(X), sd = eps), nrow = nrow(X))
# 4) Embedding Sammon Mapping
d0  <- dist(X_j)
emb <- sammon(d0, k = 2)$points
# 5) Métricas
d1           <- dist(emb)
spearman     <- cor(as.vector(d0), as.vector(d1), method = "spearman")
ari          <- adjustedRandIndex(kmeans(emb, length(unique(labels)))$cluster, labels)
silhouette_s <- mean(silhouette(kmeans(emb, length(unique(labels)))$cluster, d1)[, "sil_width"])
rank0        <- apply(as.matrix(d0), 2, rank, ties.method = "average")
rank1        <- apply(as.matrix(d1), 2, rank, ties.method = "average")
trust        <- compute_trustworthiness(rank0, rank1, k = 7)
cont         <- compute_continuity(rank0, rank1, k = 7)
# 6) Guardar métricas
cat(sprintf("Spearman=%.3f\nARI=%.3f\nSilhouette=%.3f\nTrustworthiness=%.3f\nContinuity=%.3f\n",
spearman, ari, silhouette_s, trust, cont),
file = "results/metrics_config_sammon_wine.txt")
# 7) Plot
df <- data.frame(Dim1 = emb[,1], Dim2 = emb[,2], Class = labels)
p  <- ggplot(df, aes(Dim1, Dim2, color = Class)) +
geom_point(size = 2) +
ggtitle("SM-MDS")
print(p)
ggsave("plots/Sammon_Mapping_Wine_plot.png", plot = p, width = 8, height = 6, dpi = 300)
# mds_clasico_wine.R
library(ggplot2)
library(mclust)
library(cluster)
source("../metrics.R")
source("../preprocess.R")
source("../plot_theme.R")
# 1) Cargar Wine
load("data/wine.RData")          # objeto `wine`
data_raw <- wine[, -1]           # variables numéricas
labels_raw <- factor(wine[, 1])  # clases
# 2) Preprocesado
out    <- preprocess_data(data_raw, labels_raw, z_threshold = 3)
X      <- out$data
labels <- out$labels
# 3) Embedding MDS clásico
d0  <- dist(X)
emb <- cmdscale(d0, k = 2)
# 4) Métricas
d1        <- dist(emb)
spearman  <- cor(as.vector(d0), as.vector(d1), method = "spearman")
ari       <- adjustedRandIndex(kmeans(emb, centers = length(unique(labels)))$cluster, labels)
sil       <- mean(silhouette(kmeans(emb, length(unique(labels)))$cluster, d1)[, "sil_width"])
rank0     <- apply(as.matrix(d0), 2, rank, ties.method = "average")
rank1     <- apply(as.matrix(d1), 2, rank, ties.method = "average")
trust     <- compute_trustworthiness(rank0, rank1, k = 7)
cont      <- compute_continuity(rank0, rank1, k = 7)
# 5) Guardar métricas
cat(sprintf("Spearman=%.3f\nARI=%.3f\nSilhouette=%.3f\nTrustworthiness=%.3f\nContinuity=%.3f\n",
spearman, ari, sil, trust, cont),
file = "results/metrics_config_wine.txt")
# 6) Plot
df <- data.frame(Dim1 = emb[,1], Dim2 = emb[,2], Class = labels)
p  <- ggplot(df, aes(Dim1, Dim2, color = Class)) +
geom_point(size = 2) +
ggtitle("C-MDS")
print(p)
ggsave("plots/C-MDS_Wine_plot.png", plot = p, width = 8, height = 6, dpi = 300)
# mds_no_metrico_wine.R
library(MASS)        # isoMDS()
library(ggplot2)
library(mclust)
library(cluster)
source("../metrics.R")
source("../preprocess.R")
source("../plot_theme.R")
# 1) Cargar Wine
load("data/wine.RData")
data_raw   <- wine[, -1]
labels_raw <- factor(wine[, 1])
# 2) Preprocesado
out    <- preprocess_data(data_raw, labels_raw, z_threshold = 3)
X      <- out$data
labels <- out$labels
# 3) Añadir jitter mínimo
set.seed(123)
eps <- 1e-8
X_j <- X + matrix(rnorm(nrow(X)*ncol(X), sd = eps), nrow = nrow(X))
# 4) Embedding MDS no métrico
d0  <- dist(X_j)
emb <- isoMDS(d0, k = 2)$points
# 5) Métricas
d1           <- dist(emb)
spearman     <- cor(as.vector(d0), as.vector(d1), method = "spearman")
ari          <- adjustedRandIndex(kmeans(emb, length(unique(labels)))$cluster, labels)
silhouette_m <- mean(silhouette(kmeans(emb, length(unique(labels)))$cluster, d1)[, "sil_width"])
rank0        <- apply(as.matrix(d0), 2, rank, ties.method = "average")
rank1        <- apply(as.matrix(d1), 2, rank, ties.method = "average")
trust        <- compute_trustworthiness(rank0, rank1, k = 7)
cont         <- compute_continuity(rank0, rank1, k = 7)
# 6) Guardar métricas
cat(sprintf("Spearman=%.3f\nARI=%.3f\nSilhouette=%.3f\nTrustworthiness=%.3f\nContinuity=%.3f\n",
spearman, ari, silhouette_m, trust, cont),
file = "results/metrics_config_nonmetric_wine.txt")
# 7) Plot
df <- data.frame(Dim1 = emb[,1], Dim2 = emb[,2], Class = labels)
p  <- ggplot(df, aes(Dim1, Dim2, color = Class)) +
geom_point(size = 2) +
ggtitle("NM-MDS")
print(p)
ggsave("plots/MDS_NonMetric_Wine_plot.png", plot = p, width = 8, height = 6, dpi = 300)
# tsne_wine.R
library(Rtsne)
library(ggplot2)
library(mclust)
library(cluster)
source("../metrics.R")
source("../preprocess.R")
source("../plot_theme.R")
# 1) Cargar Wine
load("data/wine.RData")
data_raw   <- wine[, -1]
labels_raw <- factor(wine[, 1])
# 2) Preprocesado
out    <- preprocess_data(data_raw, labels_raw, z_threshold = 3)
X      <- out$data
labels <- out$labels
# 3) Embedding t‑SNE
set.seed(123)
tsne_res <- Rtsne(X, perplexity = 30, verbose = FALSE, max_iter = 500)
emb      <- tsne_res$Y
# 4) Métricas
d0        <- dist(X)
d1        <- dist(emb)
spearman  <- cor(as.vector(d0), as.vector(d1), method = "spearman")
ari       <- adjustedRandIndex(kmeans(emb, length(unique(labels)))$cluster, labels)
silhouette_t <- mean(silhouette(kmeans(emb, length(unique(labels)))$cluster, d1)[, "sil_width"])
rank0     <- apply(as.matrix(d0), 2, rank, ties.method = "average")
rank1     <- apply(as.matrix(d1), 2, rank, ties.method = "average")
trust     <- compute_trustworthiness(rank0, rank1, k = 7)
cont      <- compute_continuity(rank0, rank1, k = 7)
# 5) Guardar métricas
cat(sprintf("Spearman=%.3f\nARI=%.3f\nSilhouette=%.3f\nTrustworthiness=%.3f\nContinuity=%.3f\n",
spearman, ari, silhouette_t, trust, cont),
file = "results/metrics_config_tsne_wine.txt")
# 6) Plot
df <- data.frame(Dim1 = emb[,1], Dim2 = emb[,2], Class = labels)
p  <- ggplot(df, aes(Dim1, Dim2, color = Class)) +
geom_point(size = 2) +
ggtitle("t‑SNE")
print(p)
ggsave("plots/tSNE_Wine_plot.png", plot = p, width = 8, height = 6, dpi = 300)
# sm_mds_wine.R
library(MASS)        # sammon()
library(ggplot2)
library(mclust)
library(cluster)
source("../metrics.R")
source("../preprocess.R")
source("../plot_theme.R")
# 1) Cargar Wine
load("data/wine.RData")
data_raw   <- wine[, -1]
labels_raw <- factor(wine[, 1])
# 2) Preprocesado
out    <- preprocess_data(data_raw, labels_raw, z_threshold = 3)
X      <- out$data
labels <- out$labels
# 3) Añadir jitter mínimo
set.seed(123)
eps <- 1e-8
X_j <- X + matrix(rnorm(nrow(X)*ncol(X), sd = eps), nrow = nrow(X))
# 4) Embedding Sammon Mapping
d0  <- dist(X_j)
emb <- sammon(d0, k = 2)$points
# 5) Métricas
d1           <- dist(emb)
spearman     <- cor(as.vector(d0), as.vector(d1), method = "spearman")
ari          <- adjustedRandIndex(kmeans(emb, length(unique(labels)))$cluster, labels)
silhouette_s <- mean(silhouette(kmeans(emb, length(unique(labels)))$cluster, d1)[, "sil_width"])
rank0        <- apply(as.matrix(d0), 2, rank, ties.method = "average")
rank1        <- apply(as.matrix(d1), 2, rank, ties.method = "average")
trust        <- compute_trustworthiness(rank0, rank1, k = 7)
cont         <- compute_continuity(rank0, rank1, k = 7)
# 6) Guardar métricas
cat(sprintf("Spearman=%.3f\nARI=%.3f\nSilhouette=%.3f\nTrustworthiness=%.3f\nContinuity=%.3f\n",
spearman, ari, silhouette_s, trust, cont),
file = "results/metrics_config_sammon_wine.txt")
# 7) Plot
df <- data.frame(Dim1 = emb[,1], Dim2 = emb[,2], Class = labels)
p  <- ggplot(df, aes(Dim1, Dim2, color = Class)) +
geom_point(size = 2) +
ggtitle("SM-MDS")
print(p)
ggsave("plots/Sammon_Mapping_Wine_plot.png", plot = p, width = 8, height = 6, dpi = 300)
library(smacof)
library(ggplot2)
library(mclust)
library(cluster)
source("../metrics.R")
source("../preprocess.R")
source("../plot_theme.R")
load("data/wine.RData")
data_raw   <- wine[, -1]
labels_raw <- factor(wine[, 1])
# Preprocesado
out    <- preprocess_data(data_raw, labels_raw, z_threshold = 3)
X      <- out$data
labels <- out$labels
# Matriz de distancias y pesos locales (k-NN)
d0    <- dist(X)
mat   <- as.matrix(d0)
n     <- nrow(mat)
k_nn  <- 7
nn    <- apply(mat, 1, function(x) order(x)[2:(k_nn+1)])
W     <- matrix(0, n, n)
for(i in seq_len(n)) {
W[i,   nn[,i]] <- 1
W[nn[,i], i]   <- 1
}
# Local MDS
res_lmds <- smacofSym(d0, weightmat = W, ndim = 2)
emb      <- res_lmds$conf
d1        <- dist(emb)
spearman  <- cor(as.vector(d0), as.vector(d1), method = "spearman")
ari       <- adjustedRandIndex(kmeans(emb, length(unique(labels)))$cluster, labels)
sil_obj   <- silhouette(kmeans(emb, length(unique(labels)))$cluster, d1)
sil       <- mean(sil_obj[, "sil_width"])
rank0     <- apply(as.matrix(d0), 2, rank, ties.method = "average")
rank1     <- apply(as.matrix(d1), 2, rank, ties.method = "average")
trust     <- compute_trustworthiness(rank0, rank1, k_nn)
cont      <- compute_continuity(rank0, rank1, k_nn)
cat(sprintf("Spearman=%.3f\nARI=%.3f\nSilhouette=%.3f\nTrustworthiness=%.3f\nContinuity=%.3f\n",
spearman, ari, sil, trust, cont),
file = "results/metrics_config_local_mds_wine.txt")
df <- data.frame(Dim1 = emb[,1], Dim2 = emb[,2], Type = labels)
p  <- ggplot(df, aes(x = Dim1, y = Dim2, color = Type)) +
geom_point(size = 2) +
ggtitle("L‑MDS") +
big_text_theme
print(p)
ggsave("plots/Local_MDS_Wine_plot.png", plot = p, width = 8, height = 6, dpi = 300)
library(smacof)
library(ggplot2)
library(mclust)
library(cluster)
source("../metrics.R")
source("../preprocess.R")
source("../plot_theme.R")
load("data/wine.RData")
data_raw   <- wine[, -1]
labels_raw <- factor(wine[, 1])
# Preprocesado
out    <- preprocess_data(data_raw, labels_raw, z_threshold = 3)
X      <- out$data
labels <- out$labels
# Matriz de distancias y pesos locales (k-NN)
d0    <- dist(X)
mat   <- as.matrix(d0)
n     <- nrow(mat)
k_nn  <- 7
nn    <- apply(mat, 1, function(x) order(x)[2:(k_nn+1)])
W     <- matrix(0, n, n)
for(i in seq_len(n)) {
W[i,   nn[,i]] <- 1
W[nn[,i], i]   <- 1
}
# Local MDS
res_lmds <- smacofSym(d0, weightmat = W, ndim = 2)
emb      <- res_lmds$conf
d1        <- dist(emb)
spearman  <- cor(as.vector(d0), as.vector(d1), method = "spearman")
ari       <- adjustedRandIndex(kmeans(emb, length(unique(labels)))$cluster, labels)
sil_obj   <- silhouette(kmeans(emb, length(unique(labels)))$cluster, d1)
sil       <- mean(sil_obj[, "sil_width"])
rank0     <- apply(as.matrix(d0), 2, rank, ties.method = "average")
rank1     <- apply(as.matrix(d1), 2, rank, ties.method = "average")
trust     <- compute_trustworthiness(rank0, rank1, k_nn)
cont      <- compute_continuity(rank0, rank1, k_nn)
cat(sprintf("Spearman=%.3f\nARI=%.3f\nSilhouette=%.3f\nTrustworthiness=%.3f\nContinuity=%.3f\n",
spearman, ari, sil, trust, cont),
file = "results/metrics_config_local_mds_wine.txt")
df <- data.frame(Dim1 = emb[,1], Dim2 = emb[,2], Class = labels)
p  <- ggplot(df, aes(x = Dim1, y = Dim2, color = Class)) +
geom_point(size = 2) +
ggtitle("L‑MDS") +
big_text_theme
print(p)
ggsave("plots/Local_MDS_Wine_plot.png", plot = p, width = 8, height = 6, dpi = 300)
