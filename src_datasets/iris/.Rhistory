out <- preprocess_data(iris[,1:4], iris$Species, z_threshold = 3)
iris_data <- out$data; labels <- out$labels
# jitter mínimo para evitar distancias zero
set.seed(123)
eps <- 1e-8
iris_j <- iris_data + matrix(rnorm(nrow(iris_data)*ncol(iris_data), sd = eps),
nrow = nrow(iris_data))
# 1) t-SNE (Barnes-Hut)
tsne_res <- Rtsne(iris_j, perplexity = 30, verbose = FALSE, max_iter = 500)
emb <- tsne_res$Y
# 2) Métricas
d0 <- dist(iris_j)
d1 <- dist(emb)
cat(sprintf("Spearman=%.3f\n", cor(as.vector(d0), as.vector(d1), method = "spearman")),
file = "results/metrics_config_tsne.txt")
cat(sprintf("ARI=%.3f\n", adjustedRandIndex(kmeans(emb,3)$cluster, labels)),
file = "results/metrics_config_tsne.txt", append = TRUE)
cat(sprintf("Silhouette=%.3f\n", mean(silhouette(kmeans(emb,3)$cluster, d1)[,"sil_width"])),
file = "results/metrics_config_tsne.txt", append = TRUE)
rank0 <- apply(as.matrix(d0), 2, rank, ties.method = "average")
rank1 <- apply(as.matrix(d1), 2, rank, ties.method = "average")
k <- 7
cat(sprintf("Trustworthiness=%.3f\n", compute_trustworthiness(rank0, rank1, k)),
file = "results/metrics_config_tsne.txt", append = TRUE)
cat(sprintf("Continuity=%.3f\n",     compute_continuity(rank0, rank1, k)),
file = "results/metrics_config_tsne.txt", append = TRUE)
# 3) Plot
tsne_df <- data.frame(Dim1 = emb[,1], Dim2 = emb[,2], Species = labels)
p <- ggplot(tsne_df, aes(Dim1, Dim2, color = Species)) +
geom_point(size = 2) +
ggtitle("t‑SNE") +
big_text_theme
print(p)
ggsave("plots/tSNE_preproc_plot.png", plot = p, dpi = 300, width = 8, height = 6)
# C-MDS.R
library(mclust)
library(cluster)
source("../metrics.R")
source("../preprocess.R")
source("../plot_theme.R")
data(iris)
out <- preprocess_data(iris[,1:4], iris$Species, z_threshold = 3)
iris_data <- out$data; labels <- out$labels
# 1) Cálculo de C-MDS
d0 <- dist(iris_data)
mds2 <- cmdscale(d0, k = 2)
mds_df <- data.frame(Dim1 = mds2[,1], Dim2 = mds2[,2], Species = labels)
d1 <- dist(mds2)
# Spearman
spearman <- cor(as.vector(d0), as.vector(d1), method = "spearman")
cat(sprintf("spearman=%.3f\n", spearman), file = "results/metrics_config_cmds.txt")
# ARI
ari <- adjustedRandIndex(kmeans(mds2, centers = 3)$cluster, labels)
cat(sprintf("ari=%.3f\n", ari), file = "results/metrics_config_cmds.txt", append = TRUE)
# Silhouette
sil <- silhouette(kmeans(mds2, centers = 3)$cluster, d1)
cat(sprintf("silhouette=%.3f\n", mean(sil[,"sil_width"])), "\n",
file = "results/metrics_config_cmds.txt", append = TRUE)
# Trustworthiness & Continuity
rank0 <- apply(as.matrix(d0), 2, rank, ties.method = "average")
rank1 <- apply(as.matrix(d1), 2, rank, ties.method = "average")
k <- 7
cat(sprintf("trustworthiness=%.3f\n", compute_trustworthiness(rank0, rank1, k)),
file = "results/metrics_config_cmds.txt", append = TRUE)
cat(sprintf("continuity=%.3f\n",     compute_continuity(rank0, rank1, k)),
file = "results/metrics_config_cmds.txt", append = TRUE)
# Plot
big_text_theme <- theme_minimal(base_size = 14) +
theme(
plot.title   = element_text(size = 20, hjust = 0.5),
axis.title   = element_text(size = 16),
axis.text    = element_text(size = 14),
legend.title = element_text(size = 20),
legend.text  = element_text(size = 14)
)
p <- ggplot(mds_df, aes(Dim1, Dim2, color = Species)) +
geom_point(size = 2) +
ggtitle("C‑MDS") +
big_text_theme
print(p)
ggsave("plots/C-MDS_plot.png", plot = p, dpi = 300, width = 8, height = 6)
# C-MDS.R
library(mclust)
library(cluster)
source("../metrics.R")
source("../preprocess.R")
source("../plot_theme.R")
data(iris)
out <- preprocess_data(iris[,1:4], iris$Species, z_threshold = 3)
iris_data <- out$data; labels <- out$labels
# 1) Cálculo de C-MDS
d0 <- dist(iris_data)
mds2 <- cmdscale(d0, k = 2)
mds_df <- data.frame(Dim1 = mds2[,1], Dim2 = mds2[,2], Species = labels)
d1 <- dist(mds2)
# Spearman
spearman <- cor(as.vector(d0), as.vector(d1), method = "spearman")
cat(sprintf("spearman=%.3f\n", spearman), file = "results/metrics_config_cmds.txt")
# ARI
ari <- adjustedRandIndex(kmeans(mds2, centers = 3)$cluster, labels)
cat(sprintf("ari=%.3f\n", ari), file = "results/metrics_config_cmds.txt", append = TRUE)
# Silhouette
sil <- silhouette(kmeans(mds2, centers = 3)$cluster, d1)
cat(sprintf("silhouette=%.3f\n", mean(sil[,"sil_width"])), "\n",
file = "results/metrics_config_cmds.txt", append = TRUE)
# Trustworthiness & Continuity
rank0 <- apply(as.matrix(d0), 2, rank, ties.method = "average")
rank1 <- apply(as.matrix(d1), 2, rank, ties.method = "average")
k <- 7
cat(sprintf("trustworthiness=%.3f\n", compute_trustworthiness(rank0, rank1, k)),
file = "results/metrics_config_cmds.txt", append = TRUE)
cat(sprintf("continuity=%.3f\n",     compute_continuity(rank0, rank1, k)),
file = "results/metrics_config_cmds.txt", append = TRUE)
# Plot
big_text_theme <- theme_minimal(base_size = 14) +
theme(
plot.title   = element_text(size = 20, hjust = 0.5),
axis.title   = element_text(size = 16),
axis.text    = element_text(size = 14),
legend.title = element_text(size = 20),
legend.text  = element_text(size = 14)
)
p <- ggplot(mds_df, aes(Dim1, Dim2, color = Species)) +
geom_point(size = 2) +
ggtitle("C‑MDS") +
big_text_theme
print(p)
ggsave("plots/C-MDS_plot.png", plot = p, dpi = 300, width = 8, height = 6)
# MDS_nonmetric.R
library(MASS)        # isoMDS
library(mclust)
library(cluster)
source("../metrics.R")
source("../preprocess.R")
source("../plot_theme.R")
data(iris)
out <- preprocess_data(iris[,1:4], iris$Species, z_threshold = 3)
iris_data <- out$data; labels <- out$labels
# evitar distancias idénticas
set.seed(123)
eps <- 1e-8
iris_j <- iris_data + matrix(rnorm(nrow(iris_data)*ncol(iris_data), sd = eps),
nrow = nrow(iris_data))
# 1) isoMDS
d0 <- dist(iris_j)
iso <- isoMDS(d0, k = 2)
emb <- iso$points
# 2) Métricas
d1 <- dist(emb)
cat(sprintf("spearman=%.3f\n", cor(as.vector(d0), as.vector(d1), method = "spearman")),
file = "results/metrics_config_nonmetric.txt")
cat(sprintf("ARI=%.3f\n", adjustedRandIndex(kmeans(emb,3)$cluster, labels)),
file = "results/metrics_config_nonmetric.txt", append = TRUE)
cat(sprintf("Silhouette=%.3f\n", mean(silhouette(kmeans(emb,3)$cluster, d1)[,"sil_width"])),
file = "results/metrics_config_nonmetric.txt", append = TRUE)
rank0 <- apply(as.matrix(d0), 2, rank, ties.method = "average")
rank1 <- apply(as.matrix(d1), 2, rank, ties.method = "average")
k <- 7
cat(sprintf("Trustworthiness=%.3f\n", compute_trustworthiness(rank0, rank1, k)),
file = "results/metrics_config_nonmetric.txt", append = TRUE)
cat(sprintf("Continuity=%.3f\n",     compute_continuity(rank0, rank1, k)),
file = "results/metrics_config_nonmetric.txt", append = TRUE)
# 3) Plot
mds_df <- data.frame(Dim1 = emb[,1], Dim2 = emb[,2], Species = labels)
p <- ggplot(mds_df, aes(Dim1, Dim2, color = Species)) +
geom_point(size = 2) +
ggtitle("NM-MDS") +
big_text_theme
print(p)
ggsave("plots/MDS_NonMetric_plot.png", plot = p, dpi = 300, width = 8, height = 6)
# Sammon_mapping.R
library(MASS)        # sammon()
library(mclust)
library(cluster)
source("../metrics.R")
source("../preprocess.R")
source("../plot_theme.R")
data(iris)
out <- preprocess_data(iris[,1:4], iris$Species, z_threshold = 3)
iris_data <- out$data; labels <- out$labels
# añadir jitter pequeño
set.seed(123)
eps <- 1e-8
iris_j <- iris_data + matrix(rnorm(nrow(iris_data)*ncol(iris_data), sd = eps),
nrow = nrow(iris_data))
# 1) Sammon Mapping
d0 <- dist(iris_j)
sm <- sammon(d0, k = 2)
emb <- sm$points
# 2) Métricas
d1 <- dist(emb)
cat(sprintf("Spearman=%.3f\n", cor(as.vector(d0), as.vector(d1), method = "spearman")),
file = "results/metrics_config_sammon.txt")
cat(sprintf("ARI=%.3f\n", adjustedRandIndex(kmeans(emb,3)$cluster, labels)),
file = "results/metrics_config_sammon.txt", append = TRUE)
cat(sprintf("Silhouette=%.3f\n", mean(silhouette(kmeans(emb,3)$cluster, d1)[,"sil_width"])),
file = "results/metrics_config_sammon.txt", append = TRUE)
rank0 <- apply(as.matrix(d0), 2, rank, ties.method = "average")
rank1 <- apply(as.matrix(d1), 2, rank, ties.method = "average")
k <- 7
cat(sprintf("Trustworthiness=%.3f\n", compute_trustworthiness(rank0, rank1, k)),
file = "results/metrics_config_sammon.txt", append = TRUE)
cat(sprintf("Continuity=%.3f\n",     compute_continuity(rank0, rank1, k)),
file = "results/metrics_config_sammon.txt", append = TRUE)
# 3) Plot
sam_df <- data.frame(Dim1 = emb[,1], Dim2 = emb[,2], Species = labels)
p <- ggplot(sam_df, aes(Dim1, Dim2, color = Species)) +
geom_point(size = 2) +
ggtitle("SM‑MDS") +
big_text_theme
print(p)
ggsave("plots/Sammon_Mapping_plot.png", plot = p, dpi = 300, width = 8, height = 6)
# tSNE.R
library(Rtsne)
library(mclust)
library(cluster)
source("../metrics.R")
source("../preprocess.R")
source("../plot_theme.R")
data(iris)
out <- preprocess_data(iris[,1:4], iris$Species, z_threshold = 3)
iris_data <- out$data; labels <- out$labels
# jitter mínimo para evitar distancias zero
set.seed(123)
eps <- 1e-8
iris_j <- iris_data + matrix(rnorm(nrow(iris_data)*ncol(iris_data), sd = eps),
nrow = nrow(iris_data))
# 1) t-SNE (Barnes-Hut)
tsne_res <- Rtsne(iris_j, perplexity = 30, verbose = FALSE, max_iter = 500)
emb <- tsne_res$Y
# 2) Métricas
d0 <- dist(iris_j)
d1 <- dist(emb)
cat(sprintf("Spearman=%.3f\n", cor(as.vector(d0), as.vector(d1), method = "spearman")),
file = "results/metrics_config_tsne.txt")
cat(sprintf("ARI=%.3f\n", adjustedRandIndex(kmeans(emb,3)$cluster, labels)),
file = "results/metrics_config_tsne.txt", append = TRUE)
cat(sprintf("Silhouette=%.3f\n", mean(silhouette(kmeans(emb,3)$cluster, d1)[,"sil_width"])),
file = "results/metrics_config_tsne.txt", append = TRUE)
rank0 <- apply(as.matrix(d0), 2, rank, ties.method = "average")
rank1 <- apply(as.matrix(d1), 2, rank, ties.method = "average")
k <- 7
cat(sprintf("Trustworthiness=%.3f\n", compute_trustworthiness(rank0, rank1, k)),
file = "results/metrics_config_tsne.txt", append = TRUE)
cat(sprintf("Continuity=%.3f\n",     compute_continuity(rank0, rank1, k)),
file = "results/metrics_config_tsne.txt", append = TRUE)
# 3) Plot
tsne_df <- data.frame(Dim1 = emb[,1], Dim2 = emb[,2], Species = labels)
p <- ggplot(tsne_df, aes(Dim1, Dim2, color = Species)) +
geom_point(size = 2) +
ggtitle("t‑SNE") +
big_text_theme
print(p)
ggsave("plots/tSNE_preproc_plot.png", plot = p, dpi = 300, width = 8, height = 6)
# C-MDS.R
library(mclust)
library(cluster)
source("../metrics.R")
source("../preprocess.R")
source("../plot_theme.R")
data(iris)
out <- preprocess_data(iris[,1:4], iris$Species, z_threshold = 3)
iris_data <- out$data; labels <- out$labels
# 1) Cálculo de C-MDS
d0 <- dist(iris_data)
mds2 <- cmdscale(d0, k = 2)
mds_df <- data.frame(Dim1 = mds2[,1], Dim2 = mds2[,2], Species = labels)
d1 <- dist(mds2)
# Spearman
spearman <- cor(as.vector(d0), as.vector(d1), method = "spearman")
cat(sprintf("spearman=%.3f\n", spearman), file = "results/metrics_config_cmds.txt")
# ARI
ari <- adjustedRandIndex(kmeans(mds2, centers = 3)$cluster, labels)
cat(sprintf("ari=%.3f\n", ari), file = "results/metrics_config_cmds.txt", append = TRUE)
# Silhouette
sil <- silhouette(kmeans(mds2, centers = 3)$cluster, d1)
cat(sprintf("silhouette=%.3f\n", mean(sil[,"sil_width"])), "\n",
file = "results/metrics_config_cmds.txt", append = TRUE)
# Trustworthiness & Continuity
rank0 <- apply(as.matrix(d0), 2, rank, ties.method = "average")
rank1 <- apply(as.matrix(d1), 2, rank, ties.method = "average")
k <- 7
cat(sprintf("trustworthiness=%.3f\n", compute_trustworthiness(rank0, rank1, k)),
file = "results/metrics_config_cmds.txt", append = TRUE)
cat(sprintf("continuity=%.3f\n",     compute_continuity(rank0, rank1, k)),
file = "results/metrics_config_cmds.txt", append = TRUE)
p <- ggplot(mds_df, aes(Dim1, Dim2, color = Species)) +
geom_point(size = 2) +
ggtitle("C‑MDS") +
big_text_theme
print(p)
ggsave("plots/C-MDS_plot.png", plot = p, dpi = 300, width = 8, height = 6)
# C-MDS.R
library(mclust)
library(cluster)
source("../metrics.R")
source("../preprocess.R")
source("../plot_theme.R")
data(iris)
out <- preprocess_data(iris[,1:4], iris$Species, z_threshold = 3)
iris_data <- out$data; labels <- out$labels
# 1) Cálculo de C-MDS
d0 <- dist(iris_data)
mds2 <- cmdscale(d0, k = 2)
mds_df <- data.frame(Dim1 = mds2[,1], Dim2 = mds2[,2], Species = labels)
d1 <- dist(mds2)
# Spearman
spearman <- cor(as.vector(d0), as.vector(d1), method = "spearman")
cat(sprintf("spearman=%.3f\n", spearman), file = "results/metrics_config_cmds.txt")
# ARI
ari <- adjustedRandIndex(kmeans(mds2, centers = 3)$cluster, labels)
cat(sprintf("ari=%.3f\n", ari), file = "results/metrics_config_cmds.txt", append = TRUE)
# Silhouette
sil <- silhouette(kmeans(mds2, centers = 3)$cluster, d1)
cat(sprintf("silhouette=%.3f\n", mean(sil[,"sil_width"])), "\n",
file = "results/metrics_config_cmds.txt", append = TRUE)
# Trustworthiness & Continuity
rank0 <- apply(as.matrix(d0), 2, rank, ties.method = "average")
rank1 <- apply(as.matrix(d1), 2, rank, ties.method = "average")
k <- 7
cat(sprintf("trustworthiness=%.3f\n", compute_trustworthiness(rank0, rank1, k)),
file = "results/metrics_config_cmds.txt", append = TRUE)
cat(sprintf("continuity=%.3f\n",     compute_continuity(rank0, rank1, k)),
file = "results/metrics_config_cmds.txt", append = TRUE)
p <- ggplot(mds_df, aes(Dim1, Dim2, color = Species)) +
geom_point(size = 2) +
ggtitle("C‑MDS") +
big_text_theme
print(p)
ggsave("plots/C-MDS_plot.png", plot = p, dpi = 300, width = 8, height = 6)
# C-MDS.R
library(mclust)
library(cluster)
source("../metrics.R")
source("../preprocess.R")
source("../plot_theme.R")
data(iris)
out <- preprocess_data(iris[,1:4], iris$Species, z_threshold = 3)
iris_data <- out$data; labels <- out$labels
# 1) Cálculo de C-MDS
d0 <- dist(iris_data)
mds2 <- cmdscale(d0, k = 2)
mds_df <- data.frame(Dim1 = mds2[,1], Dim2 = mds2[,2], Species = labels)
d1 <- dist(mds2)
# Spearman
spearman <- cor(as.vector(d0), as.vector(d1), method = "spearman")
cat(sprintf("spearman=%.3f\n", spearman), file = "results/metrics_config_cmds.txt")
# ARI
ari <- adjustedRandIndex(kmeans(mds2, centers = 3)$cluster, labels)
cat(sprintf("ari=%.3f\n", ari), file = "results/metrics_config_cmds.txt", append = TRUE)
# Silhouette
sil <- silhouette(kmeans(mds2, centers = 3)$cluster, d1)
cat(sprintf("silhouette=%.3f\n", mean(sil[,"sil_width"])), "\n",
file = "results/metrics_config_cmds.txt", append = TRUE)
# Trustworthiness & Continuity
rank0 <- apply(as.matrix(d0), 2, rank, ties.method = "average")
rank1 <- apply(as.matrix(d1), 2, rank, ties.method = "average")
k <- 7
cat(sprintf("trustworthiness=%.3f\n", compute_trustworthiness(rank0, rank1, k)),
file = "results/metrics_config_cmds.txt", append = TRUE)
cat(sprintf("continuity=%.3f\n",     compute_continuity(rank0, rank1, k)),
file = "results/metrics_config_cmds.txt", append = TRUE)
p <- ggplot(mds_df, aes(Dim1, Dim2, color = Species)) +
geom_point(size = 2) +
ggtitle("C‑MDS")
print(p)
ggsave("plots/C-MDS_plot.png", plot = p, dpi = 300, width = 8, height = 6)
# MDS_nonmetric.R
library(MASS)        # isoMDS
library(mclust)
library(cluster)
source("../metrics.R")
source("../preprocess.R")
source("../plot_theme.R")
data(iris)
out <- preprocess_data(iris[,1:4], iris$Species, z_threshold = 3)
iris_data <- out$data; labels <- out$labels
# evitar distancias idénticas
set.seed(123)
eps <- 1e-8
iris_j <- iris_data + matrix(rnorm(nrow(iris_data)*ncol(iris_data), sd = eps),
nrow = nrow(iris_data))
# 1) isoMDS
d0 <- dist(iris_j)
iso <- isoMDS(d0, k = 2)
emb <- iso$points
# 2) Métricas
d1 <- dist(emb)
cat(sprintf("spearman=%.3f\n", cor(as.vector(d0), as.vector(d1), method = "spearman")),
file = "results/metrics_config_nonmetric.txt")
cat(sprintf("ARI=%.3f\n", adjustedRandIndex(kmeans(emb,3)$cluster, labels)),
file = "results/metrics_config_nonmetric.txt", append = TRUE)
cat(sprintf("Silhouette=%.3f\n", mean(silhouette(kmeans(emb,3)$cluster, d1)[,"sil_width"])),
file = "results/metrics_config_nonmetric.txt", append = TRUE)
rank0 <- apply(as.matrix(d0), 2, rank, ties.method = "average")
rank1 <- apply(as.matrix(d1), 2, rank, ties.method = "average")
k <- 7
cat(sprintf("Trustworthiness=%.3f\n", compute_trustworthiness(rank0, rank1, k)),
file = "results/metrics_config_nonmetric.txt", append = TRUE)
cat(sprintf("Continuity=%.3f\n",     compute_continuity(rank0, rank1, k)),
file = "results/metrics_config_nonmetric.txt", append = TRUE)
# 3) Plot
mds_df <- data.frame(Dim1 = emb[,1], Dim2 = emb[,2], Species = labels)
p <- ggplot(mds_df, aes(Dim1, Dim2, color = Species)) +
geom_point(size = 2) +
ggtitle("NM-MDS")
print(p)
ggsave("plots/MDS_NonMetric_plot.png", plot = p, dpi = 300, width = 8, height = 6)
# Sammon_mapping.R
library(MASS)        # sammon()
library(mclust)
library(cluster)
source("../metrics.R")
source("../preprocess.R")
source("../plot_theme.R")
data(iris)
out <- preprocess_data(iris[,1:4], iris$Species, z_threshold = 3)
iris_data <- out$data; labels <- out$labels
# añadir jitter pequeño
set.seed(123)
eps <- 1e-8
iris_j <- iris_data + matrix(rnorm(nrow(iris_data)*ncol(iris_data), sd = eps),
nrow = nrow(iris_data))
# 1) Sammon Mapping
d0 <- dist(iris_j)
sm <- sammon(d0, k = 2)
emb <- sm$points
# 2) Métricas
d1 <- dist(emb)
cat(sprintf("Spearman=%.3f\n", cor(as.vector(d0), as.vector(d1), method = "spearman")),
file = "results/metrics_config_sammon.txt")
cat(sprintf("ARI=%.3f\n", adjustedRandIndex(kmeans(emb,3)$cluster, labels)),
file = "results/metrics_config_sammon.txt", append = TRUE)
cat(sprintf("Silhouette=%.3f\n", mean(silhouette(kmeans(emb,3)$cluster, d1)[,"sil_width"])),
file = "results/metrics_config_sammon.txt", append = TRUE)
rank0 <- apply(as.matrix(d0), 2, rank, ties.method = "average")
rank1 <- apply(as.matrix(d1), 2, rank, ties.method = "average")
k <- 7
cat(sprintf("Trustworthiness=%.3f\n", compute_trustworthiness(rank0, rank1, k)),
file = "results/metrics_config_sammon.txt", append = TRUE)
cat(sprintf("Continuity=%.3f\n",     compute_continuity(rank0, rank1, k)),
file = "results/metrics_config_sammon.txt", append = TRUE)
# 3) Plot
sam_df <- data.frame(Dim1 = emb[,1], Dim2 = emb[,2], Species = labels)
p <- ggplot(sam_df, aes(Dim1, Dim2, color = Species)) +
geom_point(size = 2) +
ggtitle("SM‑MDS")
print(p)
ggsave("plots/Sammon_Mapping_plot.png", plot = p, dpi = 300, width = 8, height = 6)
# tSNE.R
library(Rtsne)
library(mclust)
library(cluster)
source("../metrics.R")
source("../preprocess.R")
source("../plot_theme.R")
data(iris)
out <- preprocess_data(iris[,1:4], iris$Species, z_threshold = 3)
iris_data <- out$data; labels <- out$labels
# jitter mínimo para evitar distancias zero
set.seed(123)
eps <- 1e-8
iris_j <- iris_data + matrix(rnorm(nrow(iris_data)*ncol(iris_data), sd = eps),
nrow = nrow(iris_data))
# 1) t-SNE (Barnes-Hut)
tsne_res <- Rtsne(iris_j, perplexity = 30, verbose = FALSE, max_iter = 500)
emb <- tsne_res$Y
# 2) Métricas
d0 <- dist(iris_j)
d1 <- dist(emb)
cat(sprintf("Spearman=%.3f\n", cor(as.vector(d0), as.vector(d1), method = "spearman")),
file = "results/metrics_config_tsne.txt")
cat(sprintf("ARI=%.3f\n", adjustedRandIndex(kmeans(emb,3)$cluster, labels)),
file = "results/metrics_config_tsne.txt", append = TRUE)
cat(sprintf("Silhouette=%.3f\n", mean(silhouette(kmeans(emb,3)$cluster, d1)[,"sil_width"])),
file = "results/metrics_config_tsne.txt", append = TRUE)
rank0 <- apply(as.matrix(d0), 2, rank, ties.method = "average")
rank1 <- apply(as.matrix(d1), 2, rank, ties.method = "average")
k <- 7
cat(sprintf("Trustworthiness=%.3f\n", compute_trustworthiness(rank0, rank1, k)),
file = "results/metrics_config_tsne.txt", append = TRUE)
cat(sprintf("Continuity=%.3f\n",     compute_continuity(rank0, rank1, k)),
file = "results/metrics_config_tsne.txt", append = TRUE)
# 3) Plot
tsne_df <- data.frame(Dim1 = emb[,1], Dim2 = emb[,2], Species = labels)
p <- ggplot(tsne_df, aes(Dim1, Dim2, color = Species)) +
geom_point(size = 2) +
ggtitle("t‑SNE")
print(p)
ggsave("plots/tSNE_preproc_plot.png", plot = p, dpi = 300, width = 8, height = 6)
library(smacof)
library(smacof)
library(smacof)
library(smacof)
install.packages("smacofx")
q()
install.packages(c(
  "curl", "httpuv", "httr", "shiny", "shinyjs", "shinythemes",
  "plotly", "ProjectionBasedClustering", "smacofx"
), repos="https://cloud.r-project.org", dependencies=TRUE)
q()
# instala ProjectionBasedClustering (y dependencias)
install.packages("ProjectionBasedClustering",
                 repos="https://cloud.r-project.org",
                 dependencies=TRUE)
# instala smacofx (y todas sus dependencias)
install.packages("smacofx",
                 repos="https://cloud.r-project.org",
                 dependencies=TRUE)
q()
install.packages("Rdimtools",
                 repos="https://cloud.r-project.org",
                 dependencies=TRUE)
q()
