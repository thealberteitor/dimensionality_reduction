col_names <- c(
"class",
"cap_shape","cap_surface","cap_color","bruises","odor",
"gill_attachment","gill_spacing","gill_size","gill_color",
"stalk_shape","stalk_root",
"stalk_surface_above_ring","stalk_surface_below_ring",
"stalk_color_above_ring","stalk_color_below_ring",
"veil_type","veil_color","ring_number","ring_type",
"spore_print_color","population","habitat"
)
mushroom <- read.csv("data/mushroom.csv", header = FALSE, col.names = col_names, stringsAsFactors = TRUE)
constant_cols <- sapply(mushroom, function(col) is.factor(col) && nlevels(col) < 2)
mushroom      <- mushroom[, !constant_cols]
labels_raw     <- mushroom$class
features       <- mushroom[, setdiff(names(mushroom), "class")]
X_raw          <- model.matrix(~ . - 1, data = features)
data_x         <- X_raw
out            <- preprocess_data(data_x, labels_raw, z_threshold = 3)
X              <- out$data
labels         <- out$labels
# aplicamos tsne
tsne_res <- Rtsne(X, perplexity = 30, verbose = FALSE, max_iter = 500)
emb      <- tsne_res$Y
d0           <- dist(X)
d1           <- dist(emb)
spearman     <- cor(as.vector(d0), as.vector(d1), method = "spearman")
ari          <- adjustedRandIndex(kmeans(emb,10)$cluster, labels)
silhouette_t <- mean(silhouette(kmeans(emb,10)$cluster, d1)[, "sil_width"])
rank0        <- apply(as.matrix(d0), 2, rank, ties.method = "average")
rank1        <- apply(as.matrix(d1), 2, rank, ties.method = "average")
trust_tn     <- compute_trustworthiness(rank0, rank1, k = 7)
cont_tn      <- compute_continuity(rank0, rank1, k = 7)
cat(sprintf("Spearman=%.3f\nARI=%.3f\nSilhouette=%.3f\nTrustworthiness=%.3f\nContinuity=%.3f\n",
spearman, ari, silhouette_t, trust_tn, cont_tn),
file = "results/metrics_config_tsne_mnist.txt")
tsne_df <- data.frame(Dim1 = emb[,1], Dim2 = emb[,2], Label = factor(labels))
p <- ggplot(tsne_df, aes(Dim1, Dim2, color = Label)) +
geom_point(size = 1) +
ggtitle("t‑SNE")
print(p)
ggsave("plots/tSNE_MNIST_plot.png", plot = p, width = 8, height = 6, dpi = 300)
# local_mds.R
library(keras)
library(MASS)        # isoMDS()
library(smacof)
library(mclust)
library(cluster)
library(ggplot2)
source("../metrics.R")
source("../preprocess.R")
source("../plot_theme.R")
col_names <- c(
"class",
"cap_shape","cap_surface","cap_color","bruises","odor",
"gill_attachment","gill_spacing","gill_size","gill_color",
"stalk_shape","stalk_root",
"stalk_surface_above_ring","stalk_surface_below_ring",
"stalk_color_above_ring","stalk_color_below_ring",
"veil_type","veil_color","ring_number","ring_type",
"spore_print_color","population","habitat"
)
mushroom <- read.csv("data/mushroom.csv", header = FALSE, col.names = col_names, stringsAsFactors = TRUE)
constant_cols <- sapply(mushroom, function(col) is.factor(col) && nlevels(col) < 2)
mushroom <- mushroom[, !constant_cols]
labels_raw <- mushroom$class
features <- mushroom[, setdiff(names(mushroom), "class")]
X_raw <- model.matrix(~ . - 1, data = features)
data_x <- X_raw
out <- preprocess_data(data_x, labels_raw, z_threshold = 3)
X <- out$data
labels <- out$labels
#  matriz distancias y pesos locales (k-NN)
d0 <- dist(X)
mat_d0 <- as.matrix(d0)
n <- nrow(mat_d0)
k <- 7
nn_idx <- apply(mat_d0, 1, function(x) order(x)[2:(k+1)])
W <- matrix(0, n, n)
for(i in seq_len(n)){
W[i, nn_idx[,i]] <- 1
W[nn_idx[,i], i] <- 1
}
# Local MDS
res_lmds <- smacofSym(d0, weightmat = W, ndim = 2)
# local_mds.R
library(keras)
library(MASS)        # isoMDS()
library(smacof)
library(mclust)
library(cluster)
library(ggplot2)
source("../metrics.R")
source("../preprocess.R")
source("../plot_theme.R")
col_names <- c(
"class",
"cap_shape","cap_surface","cap_color","bruises","odor",
"gill_attachment","gill_spacing","gill_size","gill_color",
"stalk_shape","stalk_root",
"stalk_surface_above_ring","stalk_surface_below_ring",
"stalk_color_above_ring","stalk_color_below_ring",
"veil_type","veil_color","ring_number","ring_type",
"spore_print_color","population","habitat"
)
mushroom <- read.csv("data/mushroom.csv", header = FALSE, col.names = col_names, stringsAsFactors = TRUE)
constant_cols <- sapply(mushroom, function(col) is.factor(col) && nlevels(col) < 2)
mushroom <- mushroom[, !constant_cols]
labels_raw <- mushroom$class
features <- mushroom[, setdiff(names(mushroom), "class")]
X_raw <- model.matrix(~ . - 1, data = features)
data_x <- X_raw
out <- preprocess_data(data_x, labels_raw, z_threshold = 3)
X <- out$data
labels <- out$labels
#  matriz distancias y pesos locales (k-NN)
d0 <- dist(X)
mat_d0 <- as.matrix(d0)
n <- nrow(mat_d0)
k <- 7
nn_idx <- apply(mat_d0, 1, function(x) order(x)[2:(k+1)])
W <- matrix(0, n, n)
for(i in seq_len(n)){
W[i, nn_idx[,i]] <- 1
W[nn_idx[,i], i] <- 1
}
# regularizar peso para evitar singularidad
diag(W) <- diag(W) + 1
# Local MDS
res_lmds <- smacofSym(d0, weightmat = W, ndim = 2)
ggsave("plots/Local_MDS_MNIST_plot.png", plot = p, dpi = 300, width = 8, height = 6)
# local_mds.R
library(keras)
library(MASS)        # isoMDS()
library(smacof)
library(mclust)
library(cluster)
library(ggplot2)
source("../metrics.R")
source("../preprocess.R")
source("../plot_theme.R")
col_names <- c(
"class",
"cap_shape","cap_surface","cap_color","bruises","odor",
"gill_attachment","gill_spacing","gill_size","gill_color",
"stalk_shape","stalk_root",
"stalk_surface_above_ring","stalk_surface_below_ring",
"stalk_color_above_ring","stalk_color_below_ring",
"veil_type","veil_color","ring_number","ring_type",
"spore_print_color","population","habitat"
)
mushroom <- read.csv("data/mushroom.csv", header = FALSE, col.names = col_names, stringsAsFactors = TRUE)
constant_cols <- sapply(mushroom, function(col) is.factor(col) && nlevels(col) < 2)
mushroom <- mushroom[, !constant_cols]
labels_raw <- mushroom$class
features <- mushroom[, setdiff(names(mushroom), "class")]
X_raw <- model.matrix(~ . - 1, data = features)
data_x <- X_raw
out <- preprocess_data(data_x, labels_raw, z_threshold = 3)
X <- out$data
labels <- out$labels
# matriz distancias y pesos locales (k-NN)
d0 <- dist(X)
mat_d0 <- as.matrix(d0)
n <- nrow(mat_d0)
k <- 7
nn_idx <- apply(mat_d0, 1, function(x) order(x)[2:(k+1)])
W <- matrix(0, n, n)
for(i in seq_len(n)){
W[i, nn_idx[,i]] <- 1
W[nn_idx[,i], i] <- 1
}
# añadir regularización para evitar singularidad
eps_w <- 1e-6
W <- W + eps_w
# Local MDS
res_lmds <- smacofSym(d0, weightmat = W, ndim = 2)
emb <- res_lmds$conf
d1 <- dist(emb)
spearman <- cor(as.vector(d0), as.vector(d1), method = "spearman")
ari <- adjustedRandIndex(kmeans(emb, centers = length(unique(labels)))$cluster, labels)
sil <- mean(silhouette(kmeans(emb, centers = length(unique(labels)))$cluster, d1)[, "sil_width"])
rank0 <- apply(as.matrix(d0), 2, rank, ties.method = "average")
rank1 <- apply(as.matrix(d1), 2, rank, ties.method = "average")
trust <- compute_trustworthiness(rank0, rank1, k)
cont <- compute_continuity(rank0, rank1, k)
cat(sprintf("Spearman=%.3f\nARI=%.3f\nSilhouette=%.3f\nTrustworthiness=%.3f\nContinuity=%.3f\n", spearman, ari, sil, trust, cont),
file = "results/metrics_config_local_mds_mnist.txt")
lmds_df <- data.frame(Dim1 = emb[,1], Dim2 = emb[,2], Label = factor(labels))
p <- ggplot(lmds_df, aes(Dim1, Dim2, color = Label)) +
geom_point(size = 1) +
ggtitle("L-MDS") +
big_text_theme
print(p)
ggsave("plots/Local_MDS_MNIST_plot.png", plot = p, dpi = 300, width = 8, height = 6)
# local_mds.R
library(keras)
library(MASS)        # isoMDS()
library(smacof)
library(mclust)
library(cluster)
library(ggplot2)
source("../metrics.R")
source("../preprocess.R")
source("../plot_theme.R")
col_names <- c(
"class",
"cap_shape","cap_surface","cap_color","bruises","odor",
"gill_attachment","gill_spacing","gill_size","gill_color",
"stalk_shape","stalk_root",
"stalk_surface_above_ring","stalk_surface_below_ring",
"stalk_color_above_ring","stalk_color_below_ring",
"veil_type","veil_color","ring_number","ring_type",
"spore_print_color","population","habitat"
)
mushroom <- read.csv("data/mushroom.csv", header = FALSE, col.names = col_names, stringsAsFactors = TRUE)
constant_cols <- sapply(mushroom, function(col) is.factor(col) && nlevels(col) < 2)
mushroom <- mushroom[, !constant_cols]
labels_raw <- mushroom$class
features <- mushroom[, setdiff(names(mushroom), "class")]
X_raw <- model.matrix(~ . - 1, data = features)
data_x <- X_raw
out <- preprocess_data(data_x, labels_raw, z_threshold = 3)
X <- out$data
labels <- out$labels
# matriz distancias y pesos locales (k-NN)
d0 <- dist(X)
mat_d0 <- as.matrix(d0)
n <- nrow(mat_d0)
k <- 7
nn_idx <- apply(mat_d0, 1, function(x) order(x)[2:(k+1)])
W <- matrix(0, n, n)
for(i in seq_len(n)){
W[i, nn_idx[,i]] <- 1
W[nn_idx[,i], i] <- 1
}
# añadir regularización para evitar singularidad
eps_w <- 1e-6
W <- W + eps_w
# Local MDS
res_lmds <- smacofSym(d0, weightmat = W, ndim = 2)
emb <- res_lmds$conf
d1 <- dist(emb)
spearman <- cor(as.vector(d0), as.vector(d1), method = "spearman")
ari <- adjustedRandIndex(kmeans(emb, centers = length(unique(labels)))$cluster, labels)
sil <- mean(silhouette(kmeans(emb, centers = length(unique(labels)))$cluster, d1)[, "sil_width"])
rank0 <- apply(as.matrix(d0), 2, rank, ties.method = "average")
rank1 <- apply(as.matrix(d1), 2, rank, ties.method = "average")
trust <- compute_trustworthiness(rank0, rank1, k)
cont <- compute_continuity(rank0, rank1, k)
cat(sprintf("Spearman=%.3f\nARI=%.3f\nSilhouette=%.3f\nTrustworthiness=%.3f\nContinuity=%.3f\n", spearman, ari, sil, trust, cont),
file = "results/metrics_config_local_mds_mnist.txt")
lmds_df <- data.frame(Dim1 = emb[,1], Dim2 = emb[,2], Label = factor(labels))
p <- ggplot(lmds_df, aes(Dim1, Dim2, color = Label)) +
geom_point(size = 1) +
ggtitle("L-MDS") +
big_text_theme
print(p)
ggsave("plots/Local_MDS_MNIST_plot.png", plot = p, dpi = 300, width = 8, height = 6)
# tsne.R
library(keras)
library(Rtsne)
library(mclust)
library(cluster)
source("../metrics.R")
source("../preprocess.R")
source("../plot_theme.R")
col_names <- c(
"class",
"cap_shape","cap_surface","cap_color","bruises","odor",
"gill_attachment","gill_spacing","gill_size","gill_color",
"stalk_shape","stalk_root",
"stalk_surface_above_ring","stalk_surface_below_ring",
"stalk_color_above_ring","stalk_color_below_ring",
"veil_type","veil_color","ring_number","ring_type",
"spore_print_color","population","habitat"
)
mushroom <- read.csv("data/mushroom.csv", header = FALSE, col.names = col_names, stringsAsFactors = TRUE)
constant_cols <- sapply(mushroom, function(col) is.factor(col) && nlevels(col) < 2)
mushroom      <- mushroom[, !constant_cols]
labels_raw     <- mushroom$class
features       <- mushroom[, setdiff(names(mushroom), "class")]
X_raw          <- model.matrix(~ . - 1, data = features)
data_x         <- X_raw
out            <- preprocess_data(data_x, labels_raw, z_threshold = 3)
X              <- out$data
labels         <- out$labels
# aplicamos tsne
tsne_res <- Rtsne(X, perplexity = 30, verbose = FALSE, max_iter = 500)
emb      <- tsne_res$Y
d0           <- dist(X)
d1           <- dist(emb)
spearman     <- cor(as.vector(d0), as.vector(d1), method = "spearman")
ari          <- adjustedRandIndex(kmeans(emb,10)$cluster, labels)
silhouette_t <- mean(silhouette(kmeans(emb,10)$cluster, d1)[, "sil_width"])
rank0        <- apply(as.matrix(d0), 2, rank, ties.method = "average")
rank1        <- apply(as.matrix(d1), 2, rank, ties.method = "average")
trust_tn     <- compute_trustworthiness(rank0, rank1, k = 7)
cont_tn      <- compute_continuity(rank0, rank1, k = 7)
cat(sprintf("Spearman=%.3f\nARI=%.3f\nSilhouette=%.3f\nTrustworthiness=%.3f\nContinuity=%.3f\n",
spearman, ari, silhouette_t, trust_tn, cont_tn),
file = "results/metrics_config_tsne_mushroom.txt")
tsne_df <- data.frame(Dim1 = emb[,1], Dim2 = emb[,2], Label = factor(labels))
p <- ggplot(tsne_df, aes(Dim1, Dim2, color = Label)) +
geom_point(size = 1) +
ggtitle("t‑SNE")
print(p)
ggsave("plots/tSNE_mushroom_plot.png", plot = p, width = 8, height = 6, dpi = 300)
# local_mds.R
library(keras)
library(MASS)        # isoMDS()
library(smacof)
library(mclust)
library(cluster)
library(ggplot2)
source("../metrics.R")
source("../preprocess.R")
source("../plot_theme.R")
col_names <- c(
"class",
"cap_shape","cap_surface","cap_color","bruises","odor",
"gill_attachment","gill_spacing","gill_size","gill_color",
"stalk_shape","stalk_root",
"stalk_surface_above_ring","stalk_surface_below_ring",
"stalk_color_above_ring","stalk_color_below_ring",
"veil_type","veil_color","ring_number","ring_type",
"spore_print_color","population","habitat"
)
mushroom <- read.csv("data/mushroom.csv", header = FALSE, col.names = col_names, stringsAsFactors = TRUE)
constant_cols <- sapply(mushroom, function(col) is.factor(col) && nlevels(col) < 2)
mushroom <- mushroom[, !constant_cols]
labels_raw <- mushroom$class
features <- mushroom[, setdiff(names(mushroom), "class")]
X_raw <- model.matrix(~ . - 1, data = features)
data_x <- X_raw
out <- preprocess_data(data_x, labels_raw, z_threshold = 3)
X <- out$data
labels <- out$labels
# matriz distancias y pesos locales (k-NN)
d0 <- dist(X)
mat_d0 <- as.matrix(d0)
n <- nrow(mat_d0)
k <- 7
nn_idx <- apply(mat_d0, 1, function(x) order(x)[2:(k+1)])
W <- matrix(0, n, n)
for(i in seq_len(n)){
W[i, nn_idx[,i]] <- 1
W[nn_idx[,i], i] <- 1
}
# añadir regularización para evitar singularidad
eps_w <- 1e-6
W <- W + eps_w
# Local MDS
res_lmds <- smacofSym(d0, weightmat = W, ndim = 2)
emb <- res_lmds$conf
d1 <- dist(emb)
spearman <- cor(as.vector(d0), as.vector(d1), method = "spearman")
ari <- adjustedRandIndex(kmeans(emb, centers = length(unique(labels)))$cluster, labels)
sil <- mean(silhouette(kmeans(emb, centers = length(unique(labels)))$cluster, d1)[, "sil_width"])
rank0 <- apply(as.matrix(d0), 2, rank, ties.method = "average")
rank1 <- apply(as.matrix(d1), 2, rank, ties.method = "average")
trust <- compute_trustworthiness(rank0, rank1, k)
cont <- compute_continuity(rank0, rank1, k)
cat(sprintf("Spearman=%.3f\nARI=%.3f\nSilhouette=%.3f\nTrustworthiness=%.3f\nContinuity=%.3f\n", spearman, ari, sil, trust, cont),
file = "results/metrics_config_local_mds_mushroom.txt")
lmds_df <- data.frame(Dim1 = emb[,1], Dim2 = emb[,2], Label = factor(labels))
p <- ggplot(lmds_df, aes(Dim1, Dim2, color = Label)) +
geom_point(size = 1) +
ggtitle("L-MDS") +
big_text_theme
print(p)
ggsave("plots/Local_MDS_mushroom_plot.png", plot = p, dpi = 300, width = 8, height = 6)
# sm_mds.R
library(keras)
library(MASS)        # sammon()
library(mclust)
library(cluster)
source("../metrics.R")
source("../preprocess.R")
source("../plot_theme.R")
col_names <- c("class","cap_shape","cap_surface","cap_color","bruises","odor",
"gill_attachment","gill_spacing","gill_size","gill_color",
"stalk_shape","stalk_root",
"stalk_surface_above_ring","stalk_surface_below_ring",
"stalk_color_above_ring","stalk_color_below_ring",
"veil_type","veil_color","ring_number","ring_type",
"spore_print_color","population","habitat")
mushroom <- read.csv("data/mushroom.csv", header = FALSE, col.names = col_names, stringsAsFactors = TRUE)
constant_cols <- sapply(mushroom, function(col) is.factor(col) && nlevels(col) < 2)
mushroom <- mushroom[, !constant_cols]
labels_raw <- mushroom$class
features <- mushroom[, setdiff(names(mushroom), "class")]
X_raw <- model.matrix(~ . - 1, data = features)
data_x <- X_raw
out <- preprocess_data(data_x, labels_raw, z_threshold = 3)
X <- out$data
labels <- out$labels
set.seed(123)
eps <- 1e-8
X_j <- X + matrix(rnorm(nrow(X)*ncol(X), sd = eps), nrow = nrow(X))
# aplicamos sammon mapping mds.
d0 <- dist(X_j)
emb <- sammon(d0, k = 2)$points
d1 <- dist(emb)
spearman <- cor(as.vector(d0), as.vector(d1), method = "spearman")
ari <- adjustedRandIndex(kmeans(emb,10)$cluster, labels)
silhouette_s <- mean(silhouette(kmeans(emb,10)$cluster, d1)[, "sil_width"])
rank0 <- apply(as.matrix(d0), 2, rank, ties.method = "average")
rank1 <- apply(as.matrix(d1), 2, rank, ties.method = "average")
trust_sm <- compute_trustworthiness(rank0, rank1, k = 7)
cont_sm <- compute_continuity(rank0, rank1, k = 7)
cat(sprintf("Spearman=%.3f\nARI=%.3f\nSilhouette=%.3f\nTrustworthiness=%.3f\nContinuity=%.3f\n",
spearman, ari, silhouette_s, trust_sm, cont_sm),
file = "results/metrics_config_sammon_mushroom.txt")
sam_df <- data.frame(Dim1 = emb[,1], Dim2 = emb[,2], Label = factor(labels))
p <- ggplot(sam_df, aes(Dim1, Dim2, color = Label)) +
geom_point(size = 1) +
ggtitle("SM-MDS")
print(p)
ggsave("plots/Sammon_Mapping_mushroom_plot.png", plot = p, width = 8, height = 6, dpi = 300)
# mds_no_metrico.R
library(keras)
library(MASS)        # isoMDS()
library(mclust)
library(cluster)
source("../metrics.R")
source("../preprocess.R")
source("../plot_theme.R")
col_names <- c("class","cap_shape","cap_surface","cap_color","bruises","odor",
"gill_attachment","gill_spacing","gill_size","gill_color",
"stalk_shape","stalk_root",
"stalk_surface_above_ring","stalk_surface_below_ring",
"stalk_color_above_ring","stalk_color_below_ring",
"veil_type","veil_color","ring_number","ring_type",
"spore_print_color","population","habitat")
mushroom <- read.csv("data/mushroom.csv", header = FALSE, col.names = col_names, stringsAsFactors = TRUE)
constant_cols <- sapply(mushroom, function(col) is.factor(col) && nlevels(col) < 2)
mushroom <- mushroom[, !constant_cols]
labels_raw <- mushroom$class
features <- mushroom[, setdiff(names(mushroom), "class")]
X_raw <- model.matrix(~ . - 1, data = features)
data_x <- X_raw
out <- preprocess_data(data_x, labels_raw, z_threshold = 3)
X <- out$data
labels <- out$labels
eps <- 1e-8
X_j <- X + matrix(rnorm(nrow(X)*ncol(X), sd = eps), nrow = nrow(X))
#aplicamos nm-mds
d0 <- dist(X_j)
emb <- isoMDS(d0, k = 2)$points
d1 <- dist(emb)
spearman <- cor(as.vector(d0), as.vector(d1), method = "spearman")
ari <- adjustedRandIndex(kmeans(emb,10)$cluster, labels)
silhouette_m <- mean(silhouette(kmeans(emb,10)$cluster, d1)[, "sil_width"])
rank0 <- apply(as.matrix(d0), 2, rank, ties.method = "average")
rank1 <- apply(as.matrix(d1), 2, rank, ties.method = "average")
trust_nm <- compute_trustworthiness(rank0, rank1, k = 7)
cont_nm <- compute_continuity(rank0, rank1, k = 7)
cat(sprintf("Spearman=%.3f\nARI=%.3f\nSilhouette=%.3f\nTrustworthiness=%.3f\nContinuity=%.3f\n",
spearman, ari, silhouette_m, trust_nm, cont_nm),
file = "results/metrics_config_nonmetric_mushroom.txt")
mds_df <- data.frame(Dim1 = emb[,1], Dim2 = emb[,2], Label = factor(labels))
p <- ggplot(mds_df, aes(Dim1, Dim2, color = Label)) +
geom_point(size = 1) +
ggtitle("NM-MDS")
print(p)
ggsave("plots/MDS_NonMetric_mushroom_plot.png", plot = p, width = 8, height = 6, dpi = 300)
# mds_clasico.R
library(keras)
library(mclust)
library(cluster)
source("../metrics.R")
source("../preprocess.R")
source("../plot_theme.R")
col_names <- c(
"class",
"cap_shape","cap_surface","cap_color","bruises","odor",
"gill_attachment","gill_spacing","gill_size","gill_color",
"stalk_shape","stalk_root",
"stalk_surface_above_ring","stalk_surface_below_ring",
"stalk_color_above_ring","stalk_color_below_ring",
"veil_type","veil_color","ring_number","ring_type",
"spore_print_color","population","habitat"
)
mushroom <- read.csv("data/mushroom.csv", header = FALSE, col.names = col_names, stringsAsFactors = TRUE)
constant_cols <- sapply(mushroom, function(col) is.factor(col) && nlevels(col) < 2)
mushroom <- mushroom[, !constant_cols]
labels_raw <- mushroom$class
features <- mushroom[, setdiff(names(mushroom), "class")]
X_raw <- model.matrix(~ . - 1, data = features)
data_x <- X_raw
out <- preprocess_data(data_x, labels_raw, z_threshold = 3)
X <- out$data
labels <- out$labels
d0 <- dist(X)
emb <- cmdscale(d0, k = 2)
d1 <- dist(emb)
spearman <- cor(as.vector(d0), as.vector(d1), method = "spearman")
ari <- adjustedRandIndex(kmeans(emb, centers = 10)$cluster, labels)
sil <- mean(silhouette(kmeans(emb,10)$cluster, d1)[, "sil_width"])
rank0 <- apply(as.matrix(d0), 2, rank, ties.method = "average")
rank1 <- apply(as.matrix(d1), 2, rank, ties.method = "average")
trust_mds <- compute_trustworthiness(rank0, rank1, k = 7)
cont_mds <- compute_continuity(rank0, rank1, k = 7)
cat(sprintf("Spearman=%.3f\nARI=%.3f\nSilhouette=%.3f\nTrustworthiness=%.3f\nContinuity=%.3f\n",
spearman, ari, sil, trust_mds, cont_mds),
file = "results/metrics_config_mushroom.txt")
mds_df <- data.frame(Dim1 = emb[,1], Dim2 = emb[,2], Label = factor(labels))
p <- ggplot(mds_df, aes(Dim1, Dim2, color = Label)) +
geom_point(size = 1) +
ggtitle("C-MDS")
print(p)
ggsave("plots/C-MDS_mushroom_plot.png", plot = p, width = 8, height = 6, dpi = 300)
