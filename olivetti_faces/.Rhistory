emb      <- tsne_out$Y
# 4) Metrics
d0       <- dist(X)
d1       <- dist(emb)
spearman <- cor(as.vector(d0), as.vector(d1), method = "spearman")
ari      <- adjustedRandIndex(kmeans(emb, length(unique(labels)))$cluster, labels)
sil      <- mean(silhouette(kmeans(emb, length(unique(labels)))$cluster, d1)[, "sil_width"])
rank0    <- apply(as.matrix(d0), 2, rank, ties.method = "average")
rank1    <- apply(as.matrix(d1), 2, rank, ties.method = "average")
trust    <- compute_trustworthiness(rank0, rank1, k = 7)
cont     <- compute_continuity(rank0, rank1, k = 7)
# 5) Save metrics
cat(sprintf("Spearman=%.3f\nARI=%.3f\nSilhouette=%.3f\nTrustworthiness=%.3f\nContinuity=%.3f\n",
spearman, ari, sil, trust, cont),
file = "results/metrics_tsne_olivetti.txt")
# 6) Plot
df <- data.frame(Dim1 = emb[,1], Dim2 = emb[,2], Class = labels)
p  <- ggplot(df, aes(Dim1, Dim2, color = Class)) +
geom_point(size = 1.5) +
ggtitle("t-SNE")
print(p)
ggsave("plots/tsne_olivetti_plot.png", plot = p, width = 8, height = 6, dpi = 300)
# sm_mds_olivetti.R
library(RnavGraphImageData)
library(snedata)
library(MASS)        # for sammon()
library(mclust)
library(cluster)
source("../metrics.R")
source("../preprocess.R")
source("../plot_theme.R")
# 1-2) Preprocessed X and labels
df    <- olivetti_faces()
X_raw <- df[, grep("^px", names(df))]
labels_raw <- factor(df$Label)
i_out <- preprocess_data(X_raw, labels_raw, z_threshold = 3)
X     <- i_out$data
labels<- i_out$labels
# 3) Add jitter
set.seed(123)
epsilon <- 1e-8
X_j     <- X + matrix(rnorm(nrow(X)*ncol(X), sd = epsilon), nrow = nrow(X))
# 4) Sammon mapping
sm      <- sammon(dist(X_j), k = 2)
emb_s   <- sm$points
# 5) Metrics
d1_s       <- dist(emb_s)
spearman_s <- cor(as.vector(d0), as.vector(d1_s), method = "spearman")
# mds_nonmetric_olivetti.R
library(RnavGraphImageData)
library(snedata)
library(MASS)        # for isoMDS()
library(mclust)
library(cluster)
source("../metrics.R")
source("../preprocess.R")
source("../plot_theme.R")
# 1-2) Preprocessed X and labels from preprocess_data
orf   <- olivetti_faces()
X_raw <- orf[, grep("^px", names(orf))]
labels_raw <- factor(orf$Label)
i_out <- preprocess_data(X_raw, labels_raw, z_threshold = 3)
X     <- i_out$data
labels<- i_out$labels
# 3) Add jitter to avoid zero distances
set.seed(123)
epsilon <- 1e-8
X_j     <- X + matrix(rnorm(nrow(X)*ncol(X), sd = epsilon), nrow = nrow(X))
d0     <- dist(X)
# 4) Non-metric MDS embedding
iso    <- isoMDS(dist(X_j), k = 2)
emb_n  <- iso$points
# 5) Metrics
d1_n       <- dist(emb_n)
spearman_n <- cor(as.vector(d0), as.vector(d1_n), method = "spearman")
ari_n      <- adjustedRandIndex(kmeans(emb_n, length(unique(labels)))$cluster, labels)
sil_n      <- mean(silhouette(kmeans(emb_n, length(unique(labels)))$cluster, d1_n)[, "sil_width"])
rank1_n    <- apply(as.matrix(d1_n), 2, rank, ties.method = "average")
trust_n    <- compute_trustworthiness(rank0, rank1_n, k = 7)
library(RnavGraphImageData)
library(snedata)
library(mclust)
library(cluster)
source("../metrics.R")
source("../preprocess.R")
source("../plot_theme.R")
# 1) Load Olivetti faces
df_raw <- olivetti_faces()
X_raw  <- df_raw[, grep("^px", names(df_raw))]
labels_raw <- factor(df_raw$Label)
# 2) Preprocess
i_out  <- preprocess_data(X_raw, labels_raw, z_threshold = 3)
X      <- i_out$data
labels <- i_out$labels
# 3) Classical MDS embedding
d0    <- dist(X)
emb_c <- cmdscale(d0, k = 2)
# 4) Metrics
d1_c         <- dist(emb_c)
spearman_c   <- cor(as.vector(d0), as.vector(d1_c), method = "spearman")
ari_c        <- adjustedRandIndex(kmeans(emb_c, length(unique(labels)))$cluster, labels)
sil_c        <- mean(silhouette(kmeans(emb_c, length(unique(labels)))$cluster, d1_c)[, "sil_width"])
rank0        <- apply(as.matrix(d0), 2, rank, ties.method = "average")
rank1_c      <- apply(as.matrix(d1_c), 2, rank, ties.method = "average")
trust_c      <- compute_trustworthiness(rank0, rank1_c, k = 7)
cont_c       <- compute_continuity(rank0, rank1_c, k = 7)
# 5) Save metrics
cat(sprintf("Spearman=%.3f\nARI=%.3f\nSilhouette=%.3f\nTrustworthiness=%.3f\nContinuity=%.3f\n",
spearman_c, ari_c, sil_c, trust_c, cont_c),
file = "results/metrics_cmds_olivetti.txt")
# 6) Plot
df_c <- data.frame(Dim1 = emb_c[,1], Dim2 = emb_c[,2], Class = labels)
p_c  <- ggplot(df_c, aes(Dim1, Dim2, color = Class)) +
geom_point(size = 1) +
ggtitle("C-MDS")
print(p_c)
ggsave("plots/C-MDS_Olivetti.png", plot = p_c, width = 8, height = 6, dpi = 300)
# mds_nonmetric_olivetti.R
library(RnavGraphImageData)
library(snedata)
library(MASS)        # for isoMDS()
library(mclust)
library(cluster)
source("../metrics.R")
source("../preprocess.R")
source("../plot_theme.R")
# 1-2) Preprocessed X and labels from preprocess_data
orf   <- olivetti_faces()
X_raw <- orf[, grep("^px", names(orf))]
labels_raw <- factor(orf$Label)
i_out <- preprocess_data(X_raw, labels_raw, z_threshold = 3)
X     <- i_out$data
labels<- i_out$labels
# 3) Add jitter to avoid zero distances
set.seed(123)
epsilon <- 1e-8
X_j     <- X + matrix(rnorm(nrow(X)*ncol(X), sd = epsilon), nrow = nrow(X))
d0     <- dist(X)
# 4) Non-metric MDS embedding
iso    <- isoMDS(dist(X_j), k = 2)
emb_n  <- iso$points
# 5) Metrics
d1_n       <- dist(emb_n)
spearman_n <- cor(as.vector(d0), as.vector(d1_n), method = "spearman")
ari_n      <- adjustedRandIndex(kmeans(emb_n, length(unique(labels)))$cluster, labels)
sil_n      <- mean(silhouette(kmeans(emb_n, length(unique(labels)))$cluster, d1_n)[, "sil_width"])
rank1_n    <- apply(as.matrix(d1_n), 2, rank, ties.method = "average")
trust_n    <- compute_trustworthiness(rank0, rank1_n, k = 7)
cont_n     <- compute_continuity(rank0, rank1_n, k = 7)
# 6) Save metrics
cat(sprintf("Spearman=%.3f\nARI=%.3f\nSilhouette=%.3f\nTrustworthiness=%.3f\nContinuity=%.3f\n",
spearman_n, ari_n, sil_n, trust_n, cont_n),
file = "results/metrics_nonmetric_olivetti.txt")
# 7) Plot
df_n <- data.frame(Dim1 = emb_n[,1], Dim2 = emb_n[,2], Class = labels)
p_n  <- ggplot(df_n, aes(Dim1, Dim2, color = Class)) +
geom_point(size = 1) +
ggtitle("NM-MDS")
print(p_n)
ggsave("plots/NM-MDS_Olivetti.png", plot = p_n, width = 8, height = 6, dpi = 300)
# sm_mds_olivetti.R
library(RnavGraphImageData)
library(snedata)
library(MASS)        # for sammon()
library(mclust)
library(cluster)
source("../metrics.R")
source("../preprocess.R")
source("../plot_theme.R")
# 1-2) Preprocessed X and labels
df    <- olivetti_faces()
X_raw <- df[, grep("^px", names(df))]
labels_raw <- factor(df$Label)
i_out <- preprocess_data(X_raw, labels_raw, z_threshold = 3)
X     <- i_out$data
labels<- i_out$labels
# 3) Add jitter
set.seed(123)
epsilon <- 1e-8
X_j     <- X + matrix(rnorm(nrow(X)*ncol(X), sd = epsilon), nrow = nrow(X))
# 4) Sammon mapping
sm      <- sammon(dist(X_j), k = 2)
emb_s   <- sm$points
# 5) Metrics
d1_s       <- dist(emb_s)
spearman_s <- cor(as.vector(d0), as.vector(d1_s), method = "spearman")
ari_s      <- adjustedRandIndex(kmeans(emb_s, length(unique(labels)))$cluster, labels)
sil_s      <- mean(silhouette(kmeans(emb_s, length(unique(labels)))$cluster, d1_s)[, "sil_width"])
rank1_s    <- apply(as.matrix(d1_s), 2, rank, ties.method = "average")
trust_s    <- compute_trustworthiness(rank0, rank1_s, k = 7)
cont_s     <- compute_continuity(rank0, rank1_s, k = 7)
# 6) Save metrics
cat(sprintf("Spearman=%.3f\nARI=%.3f\nSilhouette=%.3f\nTrustworthiness=%.3f\nContinuity=%.3f\n",
spearman_s, ari_s, sil_s, trust_s, cont_s),
file = "results/metrics_sammon_olivetti.txt")
# 7) Plot
df_s <- data.frame(Dim1 = emb_s[,1], Dim2 = emb_s[,2], Class = labels)
p_s  <- ggplot(df_s, aes(Dim1, Dim2, color = Class)) +
geom_point(size = 1) +
ggtitle("SM-MDS")
print(p_s)
ggsave("plots/Sammon_Olivetti.png", plot = p_s, width = 8, height = 6, dpi = 300)
library(RnavGraphImageData)
library(snedata)
library(mclust)
library(cluster)
source("../metrics.R")
source("../preprocess.R")
source("../plot_theme.R")
# 1) Load Olivetti faces
df_raw <- olivetti_faces()
X_raw  <- df_raw[, grep("^px", names(df_raw))]
labels_raw <- factor(df_raw$Label)
# 2) Preprocess
i_out  <- preprocess_data(X_raw, labels_raw, z_threshold = 3)
X      <- i_out$data
labels <- i_out$labels
# 3) Classical MDS embedding
d0    <- dist(X)
emb_c <- cmdscale(d0, k = 2)
# 4) Metrics
d1_c         <- dist(emb_c)
spearman_c   <- cor(as.vector(d0), as.vector(d1_c), method = "spearman")
ari_c        <- adjustedRandIndex(kmeans(emb_c, length(unique(labels)))$cluster, labels)
sil_c        <- mean(silhouette(kmeans(emb_c, length(unique(labels)))$cluster, d1_c)[, "sil_width"])
rank0        <- apply(as.matrix(d0), 2, rank, ties.method = "average")
rank1_c      <- apply(as.matrix(d1_c), 2, rank, ties.method = "average")
trust_c      <- compute_trustworthiness(rank0, rank1_c, k = 7)
cont_c       <- compute_continuity(rank0, rank1_c, k = 7)
# 5) Save metrics
cat(sprintf("Spearman=%.3f\nARI=%.3f\nSilhouette=%.3f\nTrustworthiness=%.3f\nContinuity=%.3f\n",
spearman_c, ari_c, sil_c, trust_c, cont_c),
file = "results/metrics_cmds_olivetti.txt")
# 6) Plot
df_c <- data.frame(Dim1 = emb_c[,1], Dim2 = emb_c[,2], Class = labels)
p_c  <- ggplot(df_c, aes(Dim1, Dim2, color = Class)) +
geom_point(size = 1) +
ggtitle("C-MDS")
print(p_c)
ggsave("plots/C-MDS_Olivetti.png", plot = p_c, width = 8, height = 6, dpi = 300)
library(RnavGraphImageData)
library(snedata)
library(Rtsne)
library(mclust)
library(cluster)
source("../metrics.R")
source("../preprocess.R")
source("../plot_theme.R")
# 1) Load Olivetti faces
df_raw <- olivetti_faces()
X_raw  <- df_raw[, grep("^px", names(df_raw))]
labels_raw <- factor(df_raw$Label)
# 2) Preprocess (imputation, drop constant columns, normalize)
X_imp <- impute_by_class_median(X_raw, labels_raw)
X_cc  <- drop_constant_columns(X_imp)
X     <- normalize_data(X_cc)
labels<- labels_raw
# 3) t-SNE embedding (perplexity ~30 for 400 samples)
set.seed(123)
tsne_out <- Rtsne(X, perplexity = 30, verbose = FALSE, max_iter = 500)
emb      <- tsne_out$Y
# 4) Metrics
d0       <- dist(X)
d1       <- dist(emb)
spearman <- cor(as.vector(d0), as.vector(d1), method = "spearman")
ari      <- adjustedRandIndex(kmeans(emb, length(unique(labels)))$cluster, labels)
sil      <- mean(silhouette(kmeans(emb, length(unique(labels)))$cluster, d1)[, "sil_width"])
rank0    <- apply(as.matrix(d0), 2, rank, ties.method = "average")
rank1    <- apply(as.matrix(d1), 2, rank, ties.method = "average")
trust    <- compute_trustworthiness(rank0, rank1, k = 7)
cont     <- compute_continuity(rank0, rank1, k = 7)
# 5) Save metrics
cat(sprintf("Spearman=%.3f\nARI=%.3f\nSilhouette=%.3f\nTrustworthiness=%.3f\nContinuity=%.3f\n",
spearman, ari, sil, trust, cont),
file = "results/metrics_tsne_olivetti.txt")
# 6) Plot
df <- data.frame(Dim1 = emb[,1], Dim2 = emb[,2], Class = labels)
p  <- ggplot(df, aes(Dim1, Dim2, color = Class)) +
geom_point(size = 1.5) +
ggtitle("t-SNE")
print(p)
ggsave("plots/tsne_olivetti_plot.png", plot = p, width = 8, height = 6, dpi = 300)
# tsne_olivetti.R
library(RnavGraphImageData)  # required for olivetti_faces()
library(snedata)            # for olivetti_faces()
library(Rtsne)
library(mclust)
library(cluster)
source("../metrics.R")
source("../preprocess.R")
source("../plot_theme.R")
# 1) Load Olivetti faces
df_raw    <- olivetti_faces()
X_raw     <- df_raw[, grep("^px", names(df_raw))]
labels_raw<- factor(df_raw$Label)
# 2) Preprocess using shared pipeline
out       <- preprocess_data(X_raw, labels_raw, z_threshold = 3)
X         <- out$data
labels    <- out$labels
# 3) t-SNE embedding (perplexity ~30 for 400 samples)
set.seed(123)
tsne_out  <- Rtsne(X, perplexity = 30, verbose = FALSE, max_iter = 500)
emb       <- tsne_out$Y
# 4) Compute metrics
d0        <- dist(X)
d1        <- dist(emb)
spearman  <- cor(as.vector(d0), as.vector(d1), method = "spearman")
ari       <- adjustedRandIndex(kmeans(emb, length(unique(labels)))$cluster, labels)
sil       <- mean(silhouette(kmeans(emb, length(unique(labels)))$cluster, d1)[, "sil_width"])
rank0     <- apply(as.matrix(d0), 2, rank, ties.method = "average")
rank1     <- apply(as.matrix(d1), 2, rank, ties.method = "average")
trust     <- compute_trustworthiness(rank0, rank1, k = 7)
cont      <- compute_continuity(rank0, rank1, k = 7)
# 5) Save metrics to file
cat(sprintf("Spearman=%.3f\nARI=%.3f\nSilhouette=%.3f\nTrustworthiness=%.3f\nContinuity=%.3f\n",
spearman, ari, sil, trust, cont),
file = "results/metrics_tsne_olivetti.txt")
# 6) Plot embedding
df_plot   <- data.frame(Dim1 = emb[,1], Dim2 = emb[,2], Class = labels)
p         <- ggplot(df_plot, aes(Dim1, Dim2, color = Class)) +
geom_point(size = 1.5) +
ggtitle("t-SNE on Olivetti Faces")
print(p)
ggsave("plots/tsne_olivetti_plot.png", plot = p, width = 8, height = 6, dpi = 300)
# mds_nonmetric_olivetti.R
library(RnavGraphImageData)
library(snedata)
library(MASS)        # for isoMDS()
library(mclust)
library(cluster)
source("../metrics.R")
source("../preprocess.R")
source("../plot_theme.R")
# Preprocess
orf   <- olivetti_faces()
X_raw <- orf[, grep("^px", names(orf))]
labels_raw <- factor(orf$Label)
i_out <- preprocess_data(X_raw, labels_raw, z_threshold = 3)
X     <- i_out$data
labels<- i_out$labels
# 3) Add jitter to avoid zero distances
set.seed(123)
epsilon <- 1e-8
X_j     <- X + matrix(rnorm(nrow(X)*ncol(X), sd = epsilon), nrow = nrow(X))
d0     <- dist(X)
# 4) Non-metric MDS embedding
iso    <- isoMDS(dist(X_j), k = 2)
emb_n  <- iso$points
# 5) Metrics
d1_n       <- dist(emb_n)
spearman_n <- cor(as.vector(d0), as.vector(d1_n), method = "spearman")
ari_n      <- adjustedRandIndex(kmeans(emb_n, length(unique(labels)))$cluster, labels)
sil_n      <- mean(silhouette(kmeans(emb_n, length(unique(labels)))$cluster, d1_n)[, "sil_width"])
rank1_n    <- apply(as.matrix(d1_n), 2, rank, ties.method = "average")
trust_n    <- compute_trustworthiness(rank0, rank1_n, k = 7)
cont_n     <- compute_continuity(rank0, rank1_n, k = 7)
# 6) Save metrics
cat(sprintf("Spearman=%.3f\nARI=%.3f\nSilhouette=%.3f\nTrustworthiness=%.3f\nContinuity=%.3f\n",
spearman_n, ari_n, sil_n, trust_n, cont_n),
file = "results/metrics_nonmetric_olivetti.txt")
# 7) Plot
df_n <- data.frame(Dim1 = emb_n[,1], Dim2 = emb_n[,2], Class = labels)
p_n  <- ggplot(df_n, aes(Dim1, Dim2, color = Class)) +
geom_point(size = 1) +
ggtitle("NM-MDS")
print(p_n)
ggsave("plots/NM-MDS_Olivetti.png", plot = p_n, width = 8, height = 6, dpi = 300)
# tsne_olivetti.R
library(RnavGraphImageData)  # required for olivetti_faces()
library(snedata)            # for olivetti_faces()
library(Rtsne)
library(mclust)
library(cluster)
source("../metrics.R")
source("../preprocess.R")
source("../plot_theme.R")
# 1) Load Olivetti faces
df_raw    <- olivetti_faces()
X_raw     <- df_raw[, grep("^px", names(df_raw))]
labels_raw<- factor(df_raw$Label)
# 2) Preprocess using shared pipeline
out       <- preprocess_data(X_raw, labels_raw, z_threshold = 3)
X         <- out$data
labels    <- out$labels
# 3) t-SNE embedding (perplexity ~30 for 400 samples)
set.seed(123)
tsne_out  <- Rtsne(X, perplexity = 30, verbose = FALSE, max_iter = 500)
emb       <- tsne_out$Y
# 4) Compute metrics
d0        <- dist(X)
d1        <- dist(emb)
spearman  <- cor(as.vector(d0), as.vector(d1), method = "spearman")
ari       <- adjustedRandIndex(kmeans(emb, length(unique(labels)))$cluster, labels)
sil       <- mean(silhouette(kmeans(emb, length(unique(labels)))$cluster, d1)[, "sil_width"])
rank0     <- apply(as.matrix(d0), 2, rank, ties.method = "average")
rank1     <- apply(as.matrix(d1), 2, rank, ties.method = "average")
trust     <- compute_trustworthiness(rank0, rank1, k = 7)
cont      <- compute_continuity(rank0, rank1, k = 7)
# 5) Save metrics to file
cat(sprintf("Spearman=%.3f\nARI=%.3f\nSilhouette=%.3f\nTrustworthiness=%.3f\nContinuity=%.3f\n",
spearman, ari, sil, trust, cont),
file = "results/metrics_tsne_olivetti.txt")
# 6) Plot embedding
df_plot   <- data.frame(Dim1 = emb[,1], Dim2 = emb[,2], Class = labels)
p         <- ggplot(df_plot, aes(Dim1, Dim2, color = Class)) +
geom_point(size = 1.5) +
ggtitle("t-SNE on Olivetti Faces")
print(p)
ggsave("plots/tsne_olivetti_plot.png", plot = p, width = 8, height = 6, dpi = 300)
library(RnavGraphImageData)
library(MASS)
library(smacof)
library(mclust)
library(cluster)
library(ggplot2)
source("../metrics.R")
source("../preprocess.R")
source("../plot_theme.R")
df_raw <- olivetti_faces()
library(RnavGraphImageData)
library(MASS)
library(smacof)
library(mclust)
library(cluster)
library(ggplot2)
source("../metrics.R")
source("../preprocess.R")
source("../plot_theme.R")
df_raw <- olivetti_faces()
library(RnavGraphImageData)
library(snedata)
library(mclust)
library(cluster)
source("../metrics.R")
source("../preprocess.R")
source("../plot_theme.R")
df_raw <- olivetti_faces()
X_raw  <- df_raw[, grep("^px", names(df_raw))]
labels_raw <- factor(df_raw$Label)
# Preprocess
i_out  <- preprocess_data(X_raw, labels_raw, z_threshold = 3)
X      <- i_out$data
labels <- i_out$labels
# Classical MDS embedding
d0    <- dist(X)
emb_c <- cmdscale(d0, k = 2)
# Metrics
d1_c         <- dist(emb_c)
spearman_c   <- cor(as.vector(d0), as.vector(d1_c), method = "spearman")
ari_c        <- adjustedRandIndex(kmeans(emb_c, length(unique(labels)))$cluster, labels)
sil_c        <- mean(silhouette(kmeans(emb_c, length(unique(labels)))$cluster, d1_c)[, "sil_width"])
rank0        <- apply(as.matrix(d0), 2, rank, ties.method = "average")
rank1_c      <- apply(as.matrix(d1_c), 2, rank, ties.method = "average")
trust_c      <- compute_trustworthiness(rank0, rank1_c, k = 7)
cont_c       <- compute_continuity(rank0, rank1_c, k = 7)
cat(sprintf("Spearman=%.3f\nARI=%.3f\nSilhouette=%.3f\nTrustworthiness=%.3f\nContinuity=%.3f\n",
spearman_c, ari_c, sil_c, trust_c, cont_c),
file = "results/metrics_cmds_olivetti.txt")
df_c <- data.frame(Dim1 = emb_c[,1], Dim2 = emb_c[,2], Class = labels)
p_c  <- ggplot(df_c, aes(Dim1, Dim2, color = Class)) +
geom_point(size = 1) +
ggtitle("C-MDS")
print(p_c)
ggsave("plots/C-MDS_Olivetti.png", plot = p_c, width = 8, height = 6, dpi = 300)
library(RnavGraphImageData)
library(MASS)
library(smacof)
library(mclust)
library(cluster)
library(ggplot2)
source("../metrics.R")
source("../preprocess.R")
source("../plot_theme.R")
df_raw <- olivetti_faces()
X_raw   <- df_raw[, grep("^px", names(df_raw))]
labels_raw <- factor(df_raw$Label)
out    <- preprocess_data(X_raw, labels_raw, z_threshold = 3)
X      <- out$data
labels <- out$labels
# matriz de distancias y pesos locales (k-NN)
d0     <- dist(X)
mat_d0 <- as.matrix(d0)
n      <- nrow(mat_d0)
k      <- 7
# encontrar k vecinos más cercanos para cada punto
nn_idx <- apply(mat_d0, 1, function(x) order(x)[2:(k+1)])
W <- matrix(0, n, n)
for(i in seq_len(n)){
W[i, nn_idx[,i]] <- 1
W[nn_idx[,i], i] <- 1
}
# Local MDS
res_lmds <- smacofSym(d0, weightmat = W, ndim = 2)
emb      <- res_lmds$conf
#Métricas
d1       <- dist(emb)
spearman <- cor(as.vector(d0), as.vector(d1), method = "spearman")
ari      <- adjustedRandIndex(kmeans(emb, centers = length(unique(labels)))$cluster, labels)
sil      <- mean(silhouette(kmeans(emb, centers = length(unique(labels)))$cluster, d1)[, "sil_width"])
rank0    <- apply(as.matrix(d0), 2, rank, ties.method = "average")
rank1    <- apply(as.matrix(d1), 2, rank, ties.method = "average")
trust    <- compute_trustworthiness(rank0, rank1, k)
cont     <- compute_continuity(rank0, rank1, k)
cat(sprintf("Spearman=%.3f\nARI=%.3f\nSilhouette=%.3f\nTrustworthiness=%.3f\nContinuity=%.3f\n", spearman, ari, sil, trust, cont),
file = "results/metrics_config_local_mds_olivetti.txt")
lmds_df <- data.frame(Dim1 = emb[,1], Dim2 = emb[,2], Class = labels)
p <- ggplot(lmds_df, aes(Dim1, Dim2, color = Class)) +
geom_point(size = 1) +
ggtitle("L-MDS") +
big_text_theme
print(p)
ggsave("plots/Local_MDS_Olivetti_plot.png", plot = p, dpi = 300, width = 8, height = 6)
